
button_control_led (UART).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ae0  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10002ae0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         0000004c  20000550  10002c24  00008550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000034  2000059c  0000044c  0000859c  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000910  00000000  00000000  000085a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000eb7e  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002692  00000000  00000000  00017a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005bb6  00000000  00000000  0001a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c74  00000000  00000000  0001fc78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000744c  00000000  00000000  000218ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002dbe  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000004e5  00000000  00000000  0002c260  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10002ae0 	.word	0x10002ae0
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10002c24 	.word	0x10002c24
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	2000059c 	.word	0x2000059c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10002c70 	.word	0x10002c70
	ldr	r2, =__ram_code_start
10001084:	2000059c 	.word	0x2000059c
	ldr	r3, =__ram_code_end
10001088:	2000059c 	.word	0x2000059c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	2000059c 	.word	0x2000059c
	ldr	r2, =__bss_end
10001090:	200005d0 	.word	0x200005d0
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000297d 	.word	0x1000297d
    blx  r0
#endif

    ldr  r0, =main
10001098:	1000287d 	.word	0x1000287d

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f001 fa9e 	bl	100025e4 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f001 faea 	bl	10002680 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 fc02 	bl	10001910 <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 fbef 	bl	10001910 <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	2000059c 	.word	0x2000059c
10001168:	200005a0 	.word	0x200005a0
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f844 	bl	100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014a8:	f7ff ff36 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014ac:	4b08      	ldr	r3, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014ae:	4a08      	ldr	r2, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014b0:	6911      	ldr	r1, [r2, #16]
100014b2:	687a      	ldr	r2, [r7, #4]
100014b4:	430a      	orrs	r2, r1
100014b6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	4b05      	ldr	r3, [pc, #20]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014bc:	681a      	ldr	r2, [r3, #0]
100014be:	2380      	movs	r3, #128	; 0x80
100014c0:	05db      	lsls	r3, r3, #23
100014c2:	4013      	ands	r3, r2
100014c4:	d1f9      	bne.n	100014ba <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014c6:	f7ff ff1d 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	40010300 	.word	0x40010300

100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b082      	sub	sp, #8
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
100014dc:	4b05      	ldr	r3, [pc, #20]	; (100014f4 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x20>)
100014de:	689b      	ldr	r3, [r3, #8]
100014e0:	687a      	ldr	r2, [r7, #4]
100014e2:	4013      	ands	r3, r2
100014e4:	1e5a      	subs	r2, r3, #1
100014e6:	4193      	sbcs	r3, r2
100014e8:	b2db      	uxtb	r3, r3
}
100014ea:	1c18      	adds	r0, r3, #0
100014ec:	46bd      	mov	sp, r7
100014ee:	b002      	add	sp, #8
100014f0:	bd80      	pop	{r7, pc}
100014f2:	46c0      	nop			; (mov r8, r8)
100014f4:	40010300 	.word	0x40010300

100014f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014f8:	b580      	push	{r7, lr}
100014fa:	b084      	sub	sp, #16
100014fc:	af00      	add	r7, sp, #0
100014fe:	6078      	str	r0, [r7, #4]
10001500:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001502:	f7ff ff09 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001506:	4b27      	ldr	r3, [pc, #156]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001508:	681a      	ldr	r2, [r3, #0]
1000150a:	23ff      	movs	r3, #255	; 0xff
1000150c:	021b      	lsls	r3, r3, #8
1000150e:	4013      	ands	r3, r2
10001510:	0a1b      	lsrs	r3, r3, #8
10001512:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001514:	4b23      	ldr	r3, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001516:	4a23      	ldr	r2, [pc, #140]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001518:	69d2      	ldr	r2, [r2, #28]
1000151a:	2103      	movs	r1, #3
1000151c:	438a      	bics	r2, r1
1000151e:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
10001520:	683a      	ldr	r2, [r7, #0]
10001522:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001524:	430a      	orrs	r2, r1
10001526:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001528:	4b1e      	ldr	r3, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152a:	4a1e      	ldr	r2, [pc, #120]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000152c:	6812      	ldr	r2, [r2, #0]
1000152e:	491e      	ldr	r1, [pc, #120]	; (100015a8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
10001530:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001532:	683a      	ldr	r2, [r7, #0]
10001534:	20ff      	movs	r0, #255	; 0xff
10001536:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001538:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000153a:	491c      	ldr	r1, [pc, #112]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000153c:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000153e:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001540:	46c0      	nop			; (mov r8, r8)
10001542:	4b18      	ldr	r3, [pc, #96]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001544:	681a      	ldr	r2, [r3, #0]
10001546:	2380      	movs	r3, #128	; 0x80
10001548:	05db      	lsls	r3, r3, #23
1000154a:	4013      	ands	r3, r2
1000154c:	d1f9      	bne.n	10001542 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000154e:	68fa      	ldr	r2, [r7, #12]
10001550:	687b      	ldr	r3, [r7, #4]
10001552:	429a      	cmp	r2, r3
10001554:	d806      	bhi.n	10001564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001556:	68fa      	ldr	r2, [r7, #12]
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	1c10      	adds	r0, r2, #0
1000155c:	1c19      	adds	r1, r3, #0
1000155e:	f000 f853 	bl	10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>
10001562:	e005      	b.n	10001570 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001564:	68fa      	ldr	r2, [r7, #12]
10001566:	687b      	ldr	r3, [r7, #4]
10001568:	1c10      	adds	r0, r2, #0
1000156a:	1c19      	adds	r1, r3, #0
1000156c:	f000 f822 	bl	100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001570:	4b0c      	ldr	r3, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001572:	4a0c      	ldr	r2, [pc, #48]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001574:	6812      	ldr	r2, [r2, #0]
10001576:	490e      	ldr	r1, [pc, #56]	; (100015b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001578:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000157a:	687a      	ldr	r2, [r7, #4]
1000157c:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000157e:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001580:	490a      	ldr	r1, [pc, #40]	; (100015ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001582:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001584:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001586:	46c0      	nop			; (mov r8, r8)
10001588:	4b06      	ldr	r3, [pc, #24]	; (100015a4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000158a:	681a      	ldr	r2, [r3, #0]
1000158c:	2380      	movs	r3, #128	; 0x80
1000158e:	05db      	lsls	r3, r3, #23
10001590:	4013      	ands	r3, r2
10001592:	d1f9      	bne.n	10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001594:	f7ff feb6 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001598:	f7ff fd8a 	bl	100010b0 <SystemCoreClockUpdate>

}
1000159c:	46bd      	mov	sp, r7
1000159e:	b004      	add	sp, #16
100015a0:	bd80      	pop	{r7, pc}
100015a2:	46c0      	nop			; (mov r8, r8)
100015a4:	40010300 	.word	0x40010300
100015a8:	c00fff00 	.word	0xc00fff00
100015ac:	3ff00000 	.word	0x3ff00000
100015b0:	c00f00ff 	.word	0xc00f00ff

100015b4 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015b4:	b580      	push	{r7, lr}
100015b6:	b082      	sub	sp, #8
100015b8:	af00      	add	r7, sp, #0
100015ba:	6078      	str	r0, [r7, #4]
100015bc:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015be:	e014      	b.n	100015ea <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	089b      	lsrs	r3, r3, #2
100015c4:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c6:	4b0d      	ldr	r3, [pc, #52]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015c8:	4a0c      	ldr	r2, [pc, #48]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015ca:	6812      	ldr	r2, [r2, #0]
100015cc:	490c      	ldr	r1, [pc, #48]	; (10001600 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015ce:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d0:	687a      	ldr	r2, [r7, #4]
100015d2:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d4:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015d6:	490b      	ldr	r1, [pc, #44]	; (10001604 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015d8:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015da:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015dc:	46c0      	nop			; (mov r8, r8)
100015de:	4b07      	ldr	r3, [pc, #28]	; (100015fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015e0:	681a      	ldr	r2, [r3, #0]
100015e2:	2380      	movs	r3, #128	; 0x80
100015e4:	05db      	lsls	r3, r3, #23
100015e6:	4013      	ands	r3, r2
100015e8:	d1f9      	bne.n	100015de <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015ea:	683b      	ldr	r3, [r7, #0]
100015ec:	009a      	lsls	r2, r3, #2
100015ee:	687b      	ldr	r3, [r7, #4]
100015f0:	429a      	cmp	r2, r3
100015f2:	d3e5      	bcc.n	100015c0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015f4:	46bd      	mov	sp, r7
100015f6:	b002      	add	sp, #8
100015f8:	bd80      	pop	{r7, pc}
100015fa:	46c0      	nop			; (mov r8, r8)
100015fc:	40010300 	.word	0x40010300
10001600:	c00f00ff 	.word	0xc00f00ff
10001604:	3ff00000 	.word	0x3ff00000

10001608 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001608:	b580      	push	{r7, lr}
1000160a:	b082      	sub	sp, #8
1000160c:	af00      	add	r7, sp, #0
1000160e:	6078      	str	r0, [r7, #4]
10001610:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10001612:	e019      	b.n	10001648 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001614:	687b      	ldr	r3, [r7, #4]
10001616:	2b00      	cmp	r3, #0
10001618:	d101      	bne.n	1000161e <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
1000161a:	2301      	movs	r3, #1
1000161c:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000161e:	687b      	ldr	r3, [r7, #4]
10001620:	009b      	lsls	r3, r3, #2
10001622:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001624:	4b0c      	ldr	r3, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001626:	4a0c      	ldr	r2, [pc, #48]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001628:	6812      	ldr	r2, [r2, #0]
1000162a:	490c      	ldr	r1, [pc, #48]	; (1000165c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
1000162c:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000162e:	687a      	ldr	r2, [r7, #4]
10001630:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001632:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001634:	490a      	ldr	r1, [pc, #40]	; (10001660 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001636:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001638:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000163a:	46c0      	nop			; (mov r8, r8)
1000163c:	4b06      	ldr	r3, [pc, #24]	; (10001658 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000163e:	681a      	ldr	r2, [r3, #0]
10001640:	2380      	movs	r3, #128	; 0x80
10001642:	05db      	lsls	r3, r3, #23
10001644:	4013      	ands	r3, r2
10001646:	d1f9      	bne.n	1000163c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	009a      	lsls	r2, r3, #2
1000164c:	683b      	ldr	r3, [r7, #0]
1000164e:	429a      	cmp	r2, r3
10001650:	d3e0      	bcc.n	10001614 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001652:	46bd      	mov	sp, r7
10001654:	b002      	add	sp, #8
10001656:	bd80      	pop	{r7, pc}
10001658:	40010300 	.word	0x40010300
1000165c:	c00f00ff 	.word	0xc00f00ff
10001660:	3ff00000 	.word	0x3ff00000

10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001664:	b580      	push	{r7, lr}
10001666:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001668:	4b02      	ldr	r3, [pc, #8]	; (10001674 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
1000166a:	681b      	ldr	r3, [r3, #0]
}
1000166c:	1c18      	adds	r0, r3, #0
1000166e:	46bd      	mov	sp, r7
10001670:	bd80      	pop	{r7, pc}
10001672:	46c0      	nop			; (mov r8, r8)
10001674:	20003ffc 	.word	0x20003ffc

10001678 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b082      	sub	sp, #8
1000167c:	af00      	add	r7, sp, #0
1000167e:	1c02      	adds	r2, r0, #0
10001680:	1dfb      	adds	r3, r7, #7
10001682:	701a      	strb	r2, [r3, #0]
10001684:	1d3b      	adds	r3, r7, #4
10001686:	1c0a      	adds	r2, r1, #0
10001688:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000168a:	1d3b      	adds	r3, r7, #4
1000168c:	1d3a      	adds	r2, r7, #4
1000168e:	8812      	ldrh	r2, [r2, #0]
10001690:	2103      	movs	r1, #3
10001692:	400a      	ands	r2, r1
10001694:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001696:	1dfb      	adds	r3, r7, #7
10001698:	781b      	ldrb	r3, [r3, #0]
1000169a:	2b0f      	cmp	r3, #15
1000169c:	d813      	bhi.n	100016c6 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169e:	4b18      	ldr	r3, [pc, #96]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a0:	4a17      	ldr	r2, [pc, #92]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100016a4:	1df9      	adds	r1, r7, #7
100016a6:	7809      	ldrb	r1, [r1, #0]
100016a8:	0049      	lsls	r1, r1, #1
100016aa:	1c08      	adds	r0, r1, #0
100016ac:	2103      	movs	r1, #3
100016ae:	4081      	lsls	r1, r0
100016b0:	43c9      	mvns	r1, r1
100016b2:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100016b4:	1d39      	adds	r1, r7, #4
100016b6:	8809      	ldrh	r1, [r1, #0]
100016b8:	1df8      	adds	r0, r7, #7
100016ba:	7800      	ldrb	r0, [r0, #0]
100016bc:	0040      	lsls	r0, r0, #1
100016be:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016c0:	430a      	orrs	r2, r1
100016c2:	66da      	str	r2, [r3, #108]	; 0x6c
100016c4:	e018      	b.n	100016f8 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016c6:	1dfb      	adds	r3, r7, #7
100016c8:	1dfa      	adds	r2, r7, #7
100016ca:	7812      	ldrb	r2, [r2, #0]
100016cc:	210f      	movs	r1, #15
100016ce:	400a      	ands	r2, r1
100016d0:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016d2:	4b0b      	ldr	r3, [pc, #44]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d4:	4a0a      	ldr	r2, [pc, #40]	; (10001700 <XMC_SCU_SetInterruptControl+0x88>)
100016d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016d8:	1df9      	adds	r1, r7, #7
100016da:	7809      	ldrb	r1, [r1, #0]
100016dc:	0049      	lsls	r1, r1, #1
100016de:	1c08      	adds	r0, r1, #0
100016e0:	2103      	movs	r1, #3
100016e2:	4081      	lsls	r1, r0
100016e4:	43c9      	mvns	r1, r1
100016e6:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016e8:	1d39      	adds	r1, r7, #4
100016ea:	8809      	ldrh	r1, [r1, #0]
100016ec:	1df8      	adds	r0, r7, #7
100016ee:	7800      	ldrb	r0, [r0, #0]
100016f0:	0040      	lsls	r0, r0, #1
100016f2:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016f4:	430a      	orrs	r2, r1
100016f6:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016f8:	46bd      	mov	sp, r7
100016fa:	b002      	add	sp, #8
100016fc:	bd80      	pop	{r7, pc}
100016fe:	46c0      	nop			; (mov r8, r8)
10001700:	40010000 	.word	0x40010000

10001704 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001704:	b580      	push	{r7, lr}
10001706:	b082      	sub	sp, #8
10001708:	af00      	add	r7, sp, #0
1000170a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000170c:	687b      	ldr	r3, [r7, #4]
1000170e:	2280      	movs	r2, #128	; 0x80
10001710:	0052      	lsls	r2, r2, #1
10001712:	60da      	str	r2, [r3, #12]
}
10001714:	46bd      	mov	sp, r7
10001716:	b002      	add	sp, #8
10001718:	bd80      	pop	{r7, pc}
1000171a:	46c0      	nop			; (mov r8, r8)

1000171c <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
1000171c:	b580      	push	{r7, lr}
1000171e:	b082      	sub	sp, #8
10001720:	af00      	add	r7, sp, #0
10001722:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001724:	687b      	ldr	r3, [r7, #4]
10001726:	4a09      	ldr	r2, [pc, #36]	; (1000174c <XMC_CCU4_lUngateClock+0x30>)
10001728:	4293      	cmp	r3, r2
1000172a:	d103      	bne.n	10001734 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
1000172c:	2004      	movs	r0, #4
1000172e:	f7ff feb7 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001732:	e008      	b.n	10001746 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001734:	687b      	ldr	r3, [r7, #4]
10001736:	4a06      	ldr	r2, [pc, #24]	; (10001750 <XMC_CCU4_lUngateClock+0x34>)
10001738:	4293      	cmp	r3, r2
1000173a:	d104      	bne.n	10001746 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
1000173c:	2380      	movs	r3, #128	; 0x80
1000173e:	029b      	lsls	r3, r3, #10
10001740:	1c18      	adds	r0, r3, #0
10001742:	f7ff fead 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001746:	46bd      	mov	sp, r7
10001748:	b002      	add	sp, #8
1000174a:	bd80      	pop	{r7, pc}
1000174c:	48040000 	.word	0x48040000
10001750:	48044000 	.word	0x48044000

10001754 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001754:	b580      	push	{r7, lr}
10001756:	b082      	sub	sp, #8
10001758:	af00      	add	r7, sp, #0
1000175a:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
1000175c:	687b      	ldr	r3, [r7, #4]
1000175e:	1c18      	adds	r0, r3, #0
10001760:	f7ff ffdc 	bl	1000171c <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001764:	46bd      	mov	sp, r7
10001766:	b002      	add	sp, #8
10001768:	bd80      	pop	{r7, pc}
1000176a:	46c0      	nop			; (mov r8, r8)

1000176c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b084      	sub	sp, #16
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
10001774:	1c0a      	adds	r2, r1, #0
10001776:	1cfb      	adds	r3, r7, #3
10001778:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	1c18      	adds	r0, r3, #0
1000177e:	f7ff ffe9 	bl	10001754 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001782:	687b      	ldr	r3, [r7, #4]
10001784:	1c18      	adds	r0, r3, #0
10001786:	f7ff ffbd 	bl	10001704 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	681b      	ldr	r3, [r3, #0]
1000178e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001790:	68fb      	ldr	r3, [r7, #12]
10001792:	4a07      	ldr	r2, [pc, #28]	; (100017b0 <XMC_CCU4_Init+0x44>)
10001794:	4013      	ands	r3, r2
10001796:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001798:	1cfb      	adds	r3, r7, #3
1000179a:	781b      	ldrb	r3, [r3, #0]
1000179c:	039b      	lsls	r3, r3, #14
1000179e:	68fa      	ldr	r2, [r7, #12]
100017a0:	4313      	orrs	r3, r2
100017a2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
100017a4:	687b      	ldr	r3, [r7, #4]
100017a6:	68fa      	ldr	r2, [r7, #12]
100017a8:	601a      	str	r2, [r3, #0]
}
100017aa:	46bd      	mov	sp, r7
100017ac:	b004      	add	sp, #16
100017ae:	bd80      	pop	{r7, pc}
100017b0:	ffff3fff 	.word	0xffff3fff

100017b4 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
100017b4:	b580      	push	{r7, lr}
100017b6:	b082      	sub	sp, #8
100017b8:	af00      	add	r7, sp, #0
100017ba:	6078      	str	r0, [r7, #4]
100017bc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
100017be:	683b      	ldr	r3, [r7, #0]
100017c0:	681a      	ldr	r2, [r3, #0]
100017c2:	687b      	ldr	r3, [r7, #4]
100017c4:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100017c6:	683b      	ldr	r3, [r7, #0]
100017c8:	795b      	ldrb	r3, [r3, #5]
100017ca:	069b      	lsls	r3, r3, #26
100017cc:	0fdb      	lsrs	r3, r3, #31
100017ce:	b2db      	uxtb	r3, r3
100017d0:	051a      	lsls	r2, r3, #20
100017d2:	687b      	ldr	r3, [r7, #4]
100017d4:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
100017d6:	683b      	ldr	r3, [r7, #0]
100017d8:	791b      	ldrb	r3, [r3, #4]
100017da:	071b      	lsls	r3, r3, #28
100017dc:	0f1b      	lsrs	r3, r3, #28
100017de:	b2db      	uxtb	r3, r3
100017e0:	1c1a      	adds	r2, r3, #0
100017e2:	687b      	ldr	r3, [r7, #4]
100017e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
100017e6:	683b      	ldr	r3, [r7, #0]
100017e8:	795b      	ldrb	r3, [r3, #5]
100017ea:	071b      	lsls	r3, r3, #28
100017ec:	0f1b      	lsrs	r3, r3, #28
100017ee:	b2db      	uxtb	r3, r3
100017f0:	1c1a      	adds	r2, r3, #0
100017f2:	687b      	ldr	r3, [r7, #4]
100017f4:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100017f6:	683b      	ldr	r3, [r7, #0]
100017f8:	795b      	ldrb	r3, [r3, #5]
100017fa:	06db      	lsls	r3, r3, #27
100017fc:	0fdb      	lsrs	r3, r3, #31
100017fe:	b2db      	uxtb	r3, r3
10001800:	1c1a      	adds	r2, r3, #0
10001802:	687b      	ldr	r3, [r7, #4]
10001804:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001806:	683b      	ldr	r3, [r7, #0]
10001808:	791b      	ldrb	r3, [r3, #4]
1000180a:	061b      	lsls	r3, r3, #24
1000180c:	0f1b      	lsrs	r3, r3, #28
1000180e:	b2db      	uxtb	r3, r3
10001810:	1c1a      	adds	r2, r3, #0
10001812:	687b      	ldr	r3, [r7, #4]
10001814:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001816:	46bd      	mov	sp, r7
10001818:	b002      	add	sp, #8
1000181a:	bd80      	pop	{r7, pc}

1000181c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
1000181c:	b580      	push	{r7, lr}
1000181e:	b086      	sub	sp, #24
10001820:	af00      	add	r7, sp, #0
10001822:	6078      	str	r0, [r7, #4]
10001824:	1c08      	adds	r0, r1, #0
10001826:	1c11      	adds	r1, r2, #0
10001828:	1cfb      	adds	r3, r7, #3
1000182a:	1c02      	adds	r2, r0, #0
1000182c:	701a      	strb	r2, [r3, #0]
1000182e:	1cbb      	adds	r3, r7, #2
10001830:	1c0a      	adds	r2, r1, #0
10001832:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001834:	1cfb      	adds	r3, r7, #3
10001836:	781b      	ldrb	r3, [r3, #0]
10001838:	2b0b      	cmp	r3, #11
1000183a:	d820      	bhi.n	1000187e <XMC_CCU4_SLICE_SetInterruptNode+0x62>
1000183c:	009a      	lsls	r2, r3, #2
1000183e:	4b20      	ldr	r3, [pc, #128]	; (100018c0 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001840:	18d3      	adds	r3, r2, r3
10001842:	681b      	ldr	r3, [r3, #0]
10001844:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001846:	2303      	movs	r3, #3
10001848:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
1000184a:	2300      	movs	r3, #0
1000184c:	617b      	str	r3, [r7, #20]
      break;
1000184e:	e01b      	b.n	10001888 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001850:	230c      	movs	r3, #12
10001852:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001854:	2302      	movs	r3, #2
10001856:	617b      	str	r3, [r7, #20]
      break;
10001858:	e016      	b.n	10001888 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
1000185a:	23c0      	movs	r3, #192	; 0xc0
1000185c:	009b      	lsls	r3, r3, #2
1000185e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001860:	2308      	movs	r3, #8
10001862:	617b      	str	r3, [r7, #20]
      break;
10001864:	e010      	b.n	10001888 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001866:	23c0      	movs	r3, #192	; 0xc0
10001868:	011b      	lsls	r3, r3, #4
1000186a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
1000186c:	230a      	movs	r3, #10
1000186e:	617b      	str	r3, [r7, #20]
      break;
10001870:	e00a      	b.n	10001888 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001872:	23c0      	movs	r3, #192	; 0xc0
10001874:	019b      	lsls	r3, r3, #6
10001876:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001878:	230c      	movs	r3, #12
1000187a:	617b      	str	r3, [r7, #20]
      break;
1000187c:	e004      	b.n	10001888 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
1000187e:	2300      	movs	r3, #0
10001880:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001882:	2300      	movs	r3, #0
10001884:	617b      	str	r3, [r7, #20]
	  break;
10001886:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001888:	693b      	ldr	r3, [r7, #16]
1000188a:	2b00      	cmp	r3, #0
1000188c:	d014      	beq.n	100018b8 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
1000188e:	687b      	ldr	r3, [r7, #4]
10001890:	22a8      	movs	r2, #168	; 0xa8
10001892:	589b      	ldr	r3, [r3, r2]
10001894:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001896:	693b      	ldr	r3, [r7, #16]
10001898:	43da      	mvns	r2, r3
1000189a:	68fb      	ldr	r3, [r7, #12]
1000189c:	4013      	ands	r3, r2
1000189e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
100018a0:	1cbb      	adds	r3, r7, #2
100018a2:	781a      	ldrb	r2, [r3, #0]
100018a4:	697b      	ldr	r3, [r7, #20]
100018a6:	409a      	lsls	r2, r3
100018a8:	1c13      	adds	r3, r2, #0
100018aa:	68fa      	ldr	r2, [r7, #12]
100018ac:	4313      	orrs	r3, r2
100018ae:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
100018b0:	687b      	ldr	r3, [r7, #4]
100018b2:	21a8      	movs	r1, #168	; 0xa8
100018b4:	68fa      	ldr	r2, [r7, #12]
100018b6:	505a      	str	r2, [r3, r1]
  }
}
100018b8:	46bd      	mov	sp, r7
100018ba:	b006      	add	sp, #24
100018bc:	bd80      	pop	{r7, pc}
100018be:	46c0      	nop			; (mov r8, r8)
100018c0:	100029c8 	.word	0x100029c8

100018c4 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100018c4:	b580      	push	{r7, lr}
100018c6:	b082      	sub	sp, #8
100018c8:	af00      	add	r7, sp, #0
100018ca:	6078      	str	r0, [r7, #4]
100018cc:	1c08      	adds	r0, r1, #0
100018ce:	1c11      	adds	r1, r2, #0
100018d0:	1cfb      	adds	r3, r7, #3
100018d2:	1c02      	adds	r2, r0, #0
100018d4:	701a      	strb	r2, [r3, #0]
100018d6:	1cbb      	adds	r3, r7, #2
100018d8:	1c0a      	adds	r2, r1, #0
100018da:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100018dc:	687b      	ldr	r3, [r7, #4]
100018de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100018e0:	1cfa      	adds	r2, r7, #3
100018e2:	7812      	ldrb	r2, [r2, #0]
100018e4:	0052      	lsls	r2, r2, #1
100018e6:	1c11      	adds	r1, r2, #0
100018e8:	2203      	movs	r2, #3
100018ea:	408a      	lsls	r2, r1
100018ec:	43d2      	mvns	r2, r2
100018ee:	401a      	ands	r2, r3
100018f0:	687b      	ldr	r3, [r7, #4]
100018f2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100018f4:	687b      	ldr	r3, [r7, #4]
100018f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100018f8:	1cbb      	adds	r3, r7, #2
100018fa:	781b      	ldrb	r3, [r3, #0]
100018fc:	1cf9      	adds	r1, r7, #3
100018fe:	7809      	ldrb	r1, [r1, #0]
10001900:	0049      	lsls	r1, r1, #1
10001902:	408b      	lsls	r3, r1
10001904:	431a      	orrs	r2, r3
10001906:	687b      	ldr	r3, [r7, #4]
10001908:	675a      	str	r2, [r3, #116]	; 0x74
}
1000190a:	46bd      	mov	sp, r7
1000190c:	b002      	add	sp, #8
1000190e:	bd80      	pop	{r7, pc}

10001910 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001910:	b580      	push	{r7, lr}
10001912:	b088      	sub	sp, #32
10001914:	af00      	add	r7, sp, #0
10001916:	6078      	str	r0, [r7, #4]
10001918:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1000191a:	f3ef 8310 	mrs	r3, PRIMASK
1000191e:	617b      	str	r3, [r7, #20]
  return(result);
10001920:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001922:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001924:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001926:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001928:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
1000192a:	4b0c      	ldr	r3, [pc, #48]	; (1000195c <__aeabi_uidiv+0x4c>)
1000192c:	2204      	movs	r2, #4
1000192e:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001930:	4b0a      	ldr	r3, [pc, #40]	; (1000195c <__aeabi_uidiv+0x4c>)
10001932:	687a      	ldr	r2, [r7, #4]
10001934:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001936:	4b09      	ldr	r3, [pc, #36]	; (1000195c <__aeabi_uidiv+0x4c>)
10001938:	683a      	ldr	r2, [r7, #0]
1000193a:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
1000193c:	4b07      	ldr	r3, [pc, #28]	; (1000195c <__aeabi_uidiv+0x4c>)
1000193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001940:	61bb      	str	r3, [r7, #24]
10001942:	69fb      	ldr	r3, [r7, #28]
10001944:	60fb      	str	r3, [r7, #12]
10001946:	68fb      	ldr	r3, [r7, #12]
10001948:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000194a:	68bb      	ldr	r3, [r7, #8]
1000194c:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001950:	69bb      	ldr	r3, [r7, #24]
}
10001952:	1c18      	adds	r0, r3, #0
10001954:	46bd      	mov	sp, r7
10001956:	b008      	add	sp, #32
10001958:	bd80      	pop	{r7, pc}
1000195a:	46c0      	nop			; (mov r8, r8)
1000195c:	40030000 	.word	0x40030000

10001960 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10001960:	b580      	push	{r7, lr}
10001962:	b088      	sub	sp, #32
10001964:	af00      	add	r7, sp, #0
10001966:	6078      	str	r0, [r7, #4]
10001968:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1000196a:	f3ef 8310 	mrs	r3, PRIMASK
1000196e:	617b      	str	r3, [r7, #20]
  return(result);
10001970:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001972:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001974:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001976:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001978:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
1000197a:	4b0c      	ldr	r3, [pc, #48]	; (100019ac <__aeabi_idiv+0x4c>)
1000197c:	2200      	movs	r2, #0
1000197e:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001980:	4b0a      	ldr	r3, [pc, #40]	; (100019ac <__aeabi_idiv+0x4c>)
10001982:	687a      	ldr	r2, [r7, #4]
10001984:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001986:	4b09      	ldr	r3, [pc, #36]	; (100019ac <__aeabi_idiv+0x4c>)
10001988:	683a      	ldr	r2, [r7, #0]
1000198a:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
1000198c:	4b07      	ldr	r3, [pc, #28]	; (100019ac <__aeabi_idiv+0x4c>)
1000198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001990:	61bb      	str	r3, [r7, #24]
10001992:	69fb      	ldr	r3, [r7, #28]
10001994:	60fb      	str	r3, [r7, #12]
10001996:	68fb      	ldr	r3, [r7, #12]
10001998:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000199a:	68bb      	ldr	r3, [r7, #8]
1000199c:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100019a0:	69bb      	ldr	r3, [r7, #24]
}
100019a2:	1c18      	adds	r0, r3, #0
100019a4:	46bd      	mov	sp, r7
100019a6:	b008      	add	sp, #32
100019a8:	bd80      	pop	{r7, pc}
100019aa:	46c0      	nop			; (mov r8, r8)
100019ac:	40030000 	.word	0x40030000

100019b0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100019b0:	b580      	push	{r7, lr}
100019b2:	b082      	sub	sp, #8
100019b4:	af00      	add	r7, sp, #0
100019b6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100019bc:	b2db      	uxtb	r3, r3
100019be:	227f      	movs	r2, #127	; 0x7f
100019c0:	4393      	bics	r3, r2
100019c2:	b2db      	uxtb	r3, r3
}
100019c4:	1c18      	adds	r0, r3, #0
100019c6:	46bd      	mov	sp, r7
100019c8:	b002      	add	sp, #8
100019ca:	bd80      	pop	{r7, pc}

100019cc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100019cc:	b580      	push	{r7, lr}
100019ce:	b082      	sub	sp, #8
100019d0:	af00      	add	r7, sp, #0
100019d2:	6078      	str	r0, [r7, #4]
100019d4:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
100019d6:	687b      	ldr	r3, [r7, #4]
100019d8:	683a      	ldr	r2, [r7, #0]
100019da:	64da      	str	r2, [r3, #76]	; 0x4c
}
100019dc:	46bd      	mov	sp, r7
100019de:	b002      	add	sp, #8
100019e0:	bd80      	pop	{r7, pc}
100019e2:	46c0      	nop			; (mov r8, r8)

100019e4 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
100019e4:	b580      	push	{r7, lr}
100019e6:	b086      	sub	sp, #24
100019e8:	af00      	add	r7, sp, #0
100019ea:	60f8      	str	r0, [r7, #12]
100019ec:	60b9      	str	r1, [r7, #8]
100019ee:	1dfb      	adds	r3, r7, #7
100019f0:	701a      	strb	r2, [r3, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
100019f2:	2310      	movs	r3, #16
100019f4:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
100019f6:	68fb      	ldr	r3, [r7, #12]
100019f8:	1c18      	adds	r0, r3, #0
100019fa:	f000 f88f 	bl	10001b1c <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
100019fe:	68bb      	ldr	r3, [r7, #8]
10001a00:	7a1b      	ldrb	r3, [r3, #8]
10001a02:	2b00      	cmp	r3, #0
10001a04:	d002      	beq.n	10001a0c <XMC_UART_CH_InitEx+0x28>
  {
    oversampling = (uint32_t)config->oversampling;
10001a06:	68bb      	ldr	r3, [r7, #8]
10001a08:	7a1b      	ldrb	r3, [r3, #8]
10001a0a:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
10001a0c:	1dfb      	adds	r3, r7, #7
10001a0e:	781b      	ldrb	r3, [r3, #0]
10001a10:	2b00      	cmp	r3, #0
10001a12:	d016      	beq.n	10001a42 <XMC_UART_CH_InitEx+0x5e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
10001a14:	68bb      	ldr	r3, [r7, #8]
10001a16:	791b      	ldrb	r3, [r3, #4]
10001a18:	2b00      	cmp	r3, #0
10001a1a:	d009      	beq.n	10001a30 <XMC_UART_CH_InitEx+0x4c>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
10001a1c:	68bb      	ldr	r3, [r7, #8]
10001a1e:	681b      	ldr	r3, [r3, #0]
10001a20:	1c19      	adds	r1, r3, #0
10001a22:	697b      	ldr	r3, [r7, #20]
10001a24:	68fa      	ldr	r2, [r7, #12]
10001a26:	1c10      	adds	r0, r2, #0
10001a28:	1c1a      	adds	r2, r3, #0
10001a2a:	f000 f92d 	bl	10001c88 <XMC_USIC_CH_SetBaudrateEx>
10001a2e:	e008      	b.n	10001a42 <XMC_UART_CH_InitEx+0x5e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10001a30:	68bb      	ldr	r3, [r7, #8]
10001a32:	681a      	ldr	r2, [r3, #0]
10001a34:	68f9      	ldr	r1, [r7, #12]
10001a36:	697b      	ldr	r3, [r7, #20]
10001a38:	1c08      	adds	r0, r1, #0
10001a3a:	1c11      	adds	r1, r2, #0
10001a3c:	1c1a      	adds	r2, r3, #0
10001a3e:	f000 f8a9 	bl	10001b94 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10001a42:	68bb      	ldr	r3, [r7, #8]
10001a44:	79db      	ldrb	r3, [r3, #7]
10001a46:	3b01      	subs	r3, #1
10001a48:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10001a4a:	697b      	ldr	r3, [r7, #20]
10001a4c:	085b      	lsrs	r3, r3, #1
10001a4e:	3301      	adds	r3, #1
10001a50:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10001a52:	4313      	orrs	r3, r2
10001a54:	4a19      	ldr	r2, [pc, #100]	; (10001abc <XMC_UART_CH_InitEx+0xd8>)
10001a56:	431a      	orrs	r2, r3
10001a58:	68fb      	ldr	r3, [r7, #12]
10001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10001a5c:	68bb      	ldr	r3, [r7, #8]
10001a5e:	795b      	ldrb	r3, [r3, #5]
10001a60:	3b01      	subs	r3, #1
10001a62:	061b      	lsls	r3, r3, #24
10001a64:	2281      	movs	r2, #129	; 0x81
10001a66:	0052      	lsls	r2, r2, #1
10001a68:	431a      	orrs	r2, r3
10001a6a:	68fb      	ldr	r3, [r7, #12]
10001a6c:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10001a6e:	68bb      	ldr	r3, [r7, #8]
10001a70:	799b      	ldrb	r3, [r3, #6]
10001a72:	2b00      	cmp	r3, #0
10001a74:	d009      	beq.n	10001a8a <XMC_UART_CH_InitEx+0xa6>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
10001a76:	68fb      	ldr	r3, [r7, #12]
10001a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001a7a:	68bb      	ldr	r3, [r7, #8]
10001a7c:	799b      	ldrb	r3, [r3, #6]
10001a7e:	3b01      	subs	r3, #1
10001a80:	041b      	lsls	r3, r3, #16
10001a82:	431a      	orrs	r2, r3
10001a84:	68fb      	ldr	r3, [r7, #12]
10001a86:	635a      	str	r2, [r3, #52]	; 0x34
10001a88:	e008      	b.n	10001a9c <XMC_UART_CH_InitEx+0xb8>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10001a8a:	68fb      	ldr	r3, [r7, #12]
10001a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001a8e:	68bb      	ldr	r3, [r7, #8]
10001a90:	795b      	ldrb	r3, [r3, #5]
10001a92:	3b01      	subs	r3, #1
10001a94:	041b      	lsls	r3, r3, #16
10001a96:	431a      	orrs	r2, r3
10001a98:	68fb      	ldr	r3, [r7, #12]
10001a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10001a9c:	68fb      	ldr	r3, [r7, #12]
10001a9e:	22a0      	movs	r2, #160	; 0xa0
10001aa0:	00d2      	lsls	r2, r2, #3
10001aa2:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10001aa4:	68fb      	ldr	r3, [r7, #12]
10001aa6:	2201      	movs	r2, #1
10001aa8:	4252      	negs	r2, r2
10001aaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10001aac:	68bb      	ldr	r3, [r7, #8]
10001aae:	895b      	ldrh	r3, [r3, #10]
10001ab0:	1c1a      	adds	r2, r3, #0
10001ab2:	68fb      	ldr	r3, [r7, #12]
10001ab4:	641a      	str	r2, [r3, #64]	; 0x40
}
10001ab6:	46bd      	mov	sp, r7
10001ab8:	b006      	add	sp, #24
10001aba:	bd80      	pop	{r7, pc}
10001abc:	00030001 	.word	0x00030001

10001ac0 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
10001ac0:	b580      	push	{r7, lr}
10001ac2:	b082      	sub	sp, #8
10001ac4:	af00      	add	r7, sp, #0
10001ac6:	6078      	str	r0, [r7, #4]
10001ac8:	1c0a      	adds	r2, r1, #0
10001aca:	1cbb      	adds	r3, r7, #2
10001acc:	801a      	strh	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
10001ace:	687a      	ldr	r2, [r7, #4]
10001ad0:	2384      	movs	r3, #132	; 0x84
10001ad2:	005b      	lsls	r3, r3, #1
10001ad4:	58d2      	ldr	r2, [r2, r3]
10001ad6:	23e0      	movs	r3, #224	; 0xe0
10001ad8:	04db      	lsls	r3, r3, #19
10001ada:	4013      	ands	r3, r2
10001adc:	d114      	bne.n	10001b08 <XMC_UART_CH_Transmit+0x48>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001ade:	46c0      	nop			; (mov r8, r8)
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	1c18      	adds	r0, r3, #0
10001ae4:	f7ff ff64 	bl	100019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
10001ae8:	1e03      	subs	r3, r0, #0
10001aea:	2b80      	cmp	r3, #128	; 0x80
10001aec:	d0f8      	beq.n	10001ae0 <XMC_UART_CH_Transmit+0x20>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001aee:	687a      	ldr	r2, [r7, #4]
10001af0:	2380      	movs	r3, #128	; 0x80
10001af2:	019b      	lsls	r3, r3, #6
10001af4:	1c10      	adds	r0, r2, #0
10001af6:	1c19      	adds	r1, r3, #0
10001af8:	f7ff ff68 	bl	100019cc <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
10001afc:	1cbb      	adds	r3, r7, #2
10001afe:	881a      	ldrh	r2, [r3, #0]
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	2180      	movs	r1, #128	; 0x80
10001b04:	505a      	str	r2, [r3, r1]
10001b06:	e005      	b.n	10001b14 <XMC_UART_CH_Transmit+0x54>
  }
  else
  {
    channel->IN[0U] = data;
10001b08:	1cbb      	adds	r3, r7, #2
10001b0a:	8819      	ldrh	r1, [r3, #0]
10001b0c:	687a      	ldr	r2, [r7, #4]
10001b0e:	23c0      	movs	r3, #192	; 0xc0
10001b10:	005b      	lsls	r3, r3, #1
10001b12:	50d1      	str	r1, [r2, r3]
  }
}
10001b14:	46bd      	mov	sp, r7
10001b16:	b002      	add	sp, #8
10001b18:	bd80      	pop	{r7, pc}
10001b1a:	46c0      	nop			; (mov r8, r8)

10001b1c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10001b1c:	b580      	push	{r7, lr}
10001b1e:	b082      	sub	sp, #8
10001b20:	af00      	add	r7, sp, #0
10001b22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001b24:	687a      	ldr	r2, [r7, #4]
10001b26:	2390      	movs	r3, #144	; 0x90
10001b28:	05db      	lsls	r3, r3, #23
10001b2a:	429a      	cmp	r2, r3
10001b2c:	d003      	beq.n	10001b36 <XMC_USIC_CH_Enable+0x1a>
10001b2e:	687b      	ldr	r3, [r7, #4]
10001b30:	4a13      	ldr	r2, [pc, #76]	; (10001b80 <XMC_USIC_CH_Enable+0x64>)
10001b32:	4293      	cmp	r3, r2
10001b34:	d104      	bne.n	10001b40 <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
10001b36:	4b13      	ldr	r3, [pc, #76]	; (10001b84 <XMC_USIC_CH_Enable+0x68>)
10001b38:	1c18      	adds	r0, r3, #0
10001b3a:	f000 f9ab 	bl	10001e94 <XMC_USIC_Enable>
10001b3e:	e00b      	b.n	10001b58 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10001b40:	687b      	ldr	r3, [r7, #4]
10001b42:	4a11      	ldr	r2, [pc, #68]	; (10001b88 <XMC_USIC_CH_Enable+0x6c>)
10001b44:	4293      	cmp	r3, r2
10001b46:	d003      	beq.n	10001b50 <XMC_USIC_CH_Enable+0x34>
10001b48:	687b      	ldr	r3, [r7, #4]
10001b4a:	4a10      	ldr	r2, [pc, #64]	; (10001b8c <XMC_USIC_CH_Enable+0x70>)
10001b4c:	4293      	cmp	r3, r2
10001b4e:	d103      	bne.n	10001b58 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10001b50:	4b0f      	ldr	r3, [pc, #60]	; (10001b90 <XMC_USIC_CH_Enable+0x74>)
10001b52:	1c18      	adds	r0, r3, #0
10001b54:	f000 f99e 	bl	10001e94 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10001b58:	687b      	ldr	r3, [r7, #4]
10001b5a:	2203      	movs	r2, #3
10001b5c:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001b5e:	46c0      	nop			; (mov r8, r8)
10001b60:	687b      	ldr	r3, [r7, #4]
10001b62:	68db      	ldr	r3, [r3, #12]
10001b64:	2201      	movs	r2, #1
10001b66:	4013      	ands	r3, r2
10001b68:	d0fa      	beq.n	10001b60 <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10001b6a:	687b      	ldr	r3, [r7, #4]
10001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001b6e:	220f      	movs	r2, #15
10001b70:	4393      	bics	r3, r2
10001b72:	1c1a      	adds	r2, r3, #0
10001b74:	687b      	ldr	r3, [r7, #4]
10001b76:	641a      	str	r2, [r3, #64]	; 0x40
}
10001b78:	46bd      	mov	sp, r7
10001b7a:	b002      	add	sp, #8
10001b7c:	bd80      	pop	{r7, pc}
10001b7e:	46c0      	nop			; (mov r8, r8)
10001b80:	48000200 	.word	0x48000200
10001b84:	48000008 	.word	0x48000008
10001b88:	48004000 	.word	0x48004000
10001b8c:	48004200 	.word	0x48004200
10001b90:	48004008 	.word	0x48004008

10001b94 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10001b94:	b580      	push	{r7, lr}
10001b96:	b08e      	sub	sp, #56	; 0x38
10001b98:	af00      	add	r7, sp, #0
10001b9a:	60f8      	str	r0, [r7, #12]
10001b9c:	60b9      	str	r1, [r7, #8]
10001b9e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10001ba0:	68bb      	ldr	r3, [r7, #8]
10001ba2:	2b63      	cmp	r3, #99	; 0x63
10001ba4:	d960      	bls.n	10001c68 <XMC_USIC_CH_SetBaudrate+0xd4>
10001ba6:	687b      	ldr	r3, [r7, #4]
10001ba8:	2b00      	cmp	r3, #0
10001baa:	d05d      	beq.n	10001c68 <XMC_USIC_CH_SetBaudrate+0xd4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10001bac:	f7ff fd5a 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001bb0:	1c03      	adds	r3, r0, #0
10001bb2:	1c18      	adds	r0, r3, #0
10001bb4:	2164      	movs	r1, #100	; 0x64
10001bb6:	f7ff feab 	bl	10001910 <__aeabi_uidiv>
10001bba:	1c03      	adds	r3, r0, #0
10001bbc:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
10001bbe:	68bb      	ldr	r3, [r7, #8]
10001bc0:	1c18      	adds	r0, r3, #0
10001bc2:	2164      	movs	r1, #100	; 0x64
10001bc4:	f7ff fea4 	bl	10001910 <__aeabi_uidiv>
10001bc8:	1c03      	adds	r3, r0, #0
10001bca:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
10001bcc:	2380      	movs	r3, #128	; 0x80
10001bce:	00db      	lsls	r3, r3, #3
10001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10001bd2:	2301      	movs	r3, #1
10001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10001bd6:	4b2a      	ldr	r3, [pc, #168]	; (10001c80 <XMC_USIC_CH_SetBaudrate+0xec>)
10001bd8:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
10001bda:	2380      	movs	r3, #128	; 0x80
10001bdc:	00db      	lsls	r3, r3, #3
10001bde:	633b      	str	r3, [r7, #48]	; 0x30
10001be0:	e025      	b.n	10001c2e <XMC_USIC_CH_SetBaudrate+0x9a>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10001be2:	6a3b      	ldr	r3, [r7, #32]
10001be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001be6:	435a      	muls	r2, r3
10001be8:	1c11      	adds	r1, r2, #0
10001bea:	68bb      	ldr	r3, [r7, #8]
10001bec:	687a      	ldr	r2, [r7, #4]
10001bee:	4353      	muls	r3, r2
10001bf0:	1c08      	adds	r0, r1, #0
10001bf2:	1c19      	adds	r1, r3, #0
10001bf4:	f7ff fe8c 	bl	10001910 <__aeabi_uidiv>
10001bf8:	1c03      	adds	r3, r0, #0
10001bfa:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10001bfc:	69fb      	ldr	r3, [r7, #28]
10001bfe:	0a9b      	lsrs	r3, r3, #10
10001c00:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10001c02:	69fb      	ldr	r3, [r7, #28]
10001c04:	059b      	lsls	r3, r3, #22
10001c06:	0d9b      	lsrs	r3, r3, #22
10001c08:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
10001c0a:	69ba      	ldr	r2, [r7, #24]
10001c0c:	2380      	movs	r3, #128	; 0x80
10001c0e:	00db      	lsls	r3, r3, #3
10001c10:	429a      	cmp	r2, r3
10001c12:	d809      	bhi.n	10001c28 <XMC_USIC_CH_SetBaudrate+0x94>
10001c14:	697a      	ldr	r2, [r7, #20]
10001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001c18:	429a      	cmp	r2, r3
10001c1a:	d205      	bcs.n	10001c28 <XMC_USIC_CH_SetBaudrate+0x94>
      {
        pdiv_frac_min = pdiv_frac;
10001c1c:	697b      	ldr	r3, [r7, #20]
10001c1e:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10001c20:	69bb      	ldr	r3, [r7, #24]
10001c22:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001c26:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
10001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001c2a:	3b01      	subs	r3, #1
10001c2c:	633b      	str	r3, [r7, #48]	; 0x30
10001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001c30:	2b00      	cmp	r3, #0
10001c32:	d1d6      	bne.n	10001be2 <XMC_USIC_CH_SetBaudrate+0x4e>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
10001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001c36:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10001c38:	2280      	movs	r2, #128	; 0x80
10001c3a:	0212      	lsls	r2, r2, #8
10001c3c:	431a      	orrs	r2, r3
10001c3e:	68fb      	ldr	r3, [r7, #12]
10001c40:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001c42:	68fb      	ldr	r3, [r7, #12]
10001c44:	695b      	ldr	r3, [r3, #20]
10001c46:	4a0f      	ldr	r2, [pc, #60]	; (10001c84 <XMC_USIC_CH_SetBaudrate+0xf0>)
10001c48:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001c4a:	687b      	ldr	r3, [r7, #4]
10001c4c:	3b01      	subs	r3, #1
10001c4e:	029b      	lsls	r3, r3, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10001c50:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001c54:	3b01      	subs	r3, #1
10001c56:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001c58:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001c5a:	68fb      	ldr	r3, [r7, #12]
10001c5c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10001c5e:	2337      	movs	r3, #55	; 0x37
10001c60:	18fb      	adds	r3, r7, r3
10001c62:	2200      	movs	r2, #0
10001c64:	701a      	strb	r2, [r3, #0]
10001c66:	e003      	b.n	10001c70 <XMC_USIC_CH_SetBaudrate+0xdc>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10001c68:	2337      	movs	r3, #55	; 0x37
10001c6a:	18fb      	adds	r3, r7, r3
10001c6c:	2201      	movs	r2, #1
10001c6e:	701a      	strb	r2, [r3, #0]
  }

  return status;
10001c70:	2337      	movs	r3, #55	; 0x37
10001c72:	18fb      	adds	r3, r7, r3
10001c74:	781b      	ldrb	r3, [r3, #0]
}
10001c76:	1c18      	adds	r0, r3, #0
10001c78:	46bd      	mov	sp, r7
10001c7a:	b00e      	add	sp, #56	; 0x38
10001c7c:	bd80      	pop	{r7, pc}
10001c7e:	46c0      	nop			; (mov r8, r8)
10001c80:	000003ff 	.word	0x000003ff
10001c84:	fc0080ef 	.word	0xfc0080ef

10001c88 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
10001c88:	b580      	push	{r7, lr}
10001c8a:	b08c      	sub	sp, #48	; 0x30
10001c8c:	af00      	add	r7, sp, #0
10001c8e:	60f8      	str	r0, [r7, #12]
10001c90:	60b9      	str	r1, [r7, #8]
10001c92:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001c94:	f7ff fce6 	bl	10001664 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001c98:	1c03      	adds	r3, r0, #0
10001c9a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
10001c9c:	68bb      	ldr	r3, [r7, #8]
10001c9e:	687a      	ldr	r2, [r7, #4]
10001ca0:	4353      	muls	r3, r2
10001ca2:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
10001ca4:	2301      	movs	r3, #1
10001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
10001ca8:	6a3a      	ldr	r2, [r7, #32]
10001caa:	69fb      	ldr	r3, [r7, #28]
10001cac:	429a      	cmp	r2, r3
10001cae:	dd62      	ble.n	10001d76 <XMC_USIC_CH_SetBaudrateEx+0xee>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10001cb0:	6a38      	ldr	r0, [r7, #32]
10001cb2:	69f9      	ldr	r1, [r7, #28]
10001cb4:	f7ff fe54 	bl	10001960 <__aeabi_idiv>
10001cb8:	1c03      	adds	r3, r0, #0
10001cba:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
10001cbc:	e00f      	b.n	10001cde <XMC_USIC_CH_SetBaudrateEx+0x56>
    {
      pdiv++;
10001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001cc0:	3301      	adds	r3, #1
10001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
10001cc4:	68bb      	ldr	r3, [r7, #8]
10001cc6:	687a      	ldr	r2, [r7, #4]
10001cc8:	4353      	muls	r3, r2
10001cca:	1c1a      	adds	r2, r3, #0
10001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001cce:	4353      	muls	r3, r2
10001cd0:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10001cd2:	6a38      	ldr	r0, [r7, #32]
10001cd4:	69f9      	ldr	r1, [r7, #28]
10001cd6:	f7ff fe43 	bl	10001960 <__aeabi_idiv>
10001cda:	1c03      	adds	r3, r0, #0
10001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
10001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001ce0:	4a2a      	ldr	r2, [pc, #168]	; (10001d8c <XMC_USIC_CH_SetBaudrateEx+0x104>)
10001ce2:	4293      	cmp	r3, r2
10001ce4:	d8eb      	bhi.n	10001cbe <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
10001ce6:	6a39      	ldr	r1, [r7, #32]
10001ce8:	687b      	ldr	r3, [r7, #4]
10001cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
10001cec:	4353      	muls	r3, r2
10001cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001cf0:	4353      	muls	r3, r2
10001cf2:	1c08      	adds	r0, r1, #0
10001cf4:	1c19      	adds	r1, r3, #0
10001cf6:	f7ff fe0b 	bl	10001910 <__aeabi_uidiv>
10001cfa:	1c03      	adds	r3, r0, #0
10001cfc:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
10001cfe:	6a39      	ldr	r1, [r7, #32]
10001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001d02:	3301      	adds	r3, #1
10001d04:	687a      	ldr	r2, [r7, #4]
10001d06:	4353      	muls	r3, r2
10001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001d0a:	4353      	muls	r3, r2
10001d0c:	1c08      	adds	r0, r1, #0
10001d0e:	1c19      	adds	r1, r3, #0
10001d10:	f7ff fdfe 	bl	10001910 <__aeabi_uidiv>
10001d14:	1c03      	adds	r3, r0, #0
10001d16:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10001d18:	68ba      	ldr	r2, [r7, #8]
10001d1a:	697b      	ldr	r3, [r7, #20]
10001d1c:	1ad3      	subs	r3, r2, r3
10001d1e:	17d9      	asrs	r1, r3, #31
10001d20:	185a      	adds	r2, r3, r1
10001d22:	404a      	eors	r2, r1
10001d24:	68b9      	ldr	r1, [r7, #8]
10001d26:	69bb      	ldr	r3, [r7, #24]
10001d28:	1acb      	subs	r3, r1, r3
10001d2a:	17d9      	asrs	r1, r3, #31
10001d2c:	185b      	adds	r3, r3, r1
10001d2e:	404b      	eors	r3, r1
10001d30:	429a      	cmp	r2, r3
10001d32:	da02      	bge.n	10001d3a <XMC_USIC_CH_SetBaudrateEx+0xb2>
    {
      divider_step += 1;
10001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001d36:	3301      	adds	r3, #1
10001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
10001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001d3c:	2280      	movs	r2, #128	; 0x80
10001d3e:	00d2      	lsls	r2, r2, #3
10001d40:	1ad3      	subs	r3, r2, r3
10001d42:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001d46:	2280      	movs	r2, #128	; 0x80
10001d48:	01d2      	lsls	r2, r2, #7
10001d4a:	431a      	orrs	r2, r3
10001d4c:	68fb      	ldr	r3, [r7, #12]
10001d4e:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001d50:	68fb      	ldr	r3, [r7, #12]
10001d52:	695b      	ldr	r3, [r3, #20]
10001d54:	4a0e      	ldr	r2, [pc, #56]	; (10001d90 <XMC_USIC_CH_SetBaudrateEx+0x108>)
10001d56:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001d58:	687b      	ldr	r3, [r7, #4]
10001d5a:	3b01      	subs	r3, #1
10001d5c:	029b      	lsls	r3, r3, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10001d5e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
10001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001d62:	3b01      	subs	r3, #1
10001d64:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001d66:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001d68:	68fb      	ldr	r3, [r7, #12]
10001d6a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10001d6c:	2327      	movs	r3, #39	; 0x27
10001d6e:	18fb      	adds	r3, r7, r3
10001d70:	2200      	movs	r2, #0
10001d72:	701a      	strb	r2, [r3, #0]
10001d74:	e003      	b.n	10001d7e <XMC_USIC_CH_SetBaudrateEx+0xf6>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10001d76:	2327      	movs	r3, #39	; 0x27
10001d78:	18fb      	adds	r3, r7, r3
10001d7a:	2201      	movs	r2, #1
10001d7c:	701a      	strb	r2, [r3, #0]
  }

  return status;
10001d7e:	2327      	movs	r3, #39	; 0x27
10001d80:	18fb      	adds	r3, r7, r3
10001d82:	781b      	ldrb	r3, [r3, #0]
}
10001d84:	1c18      	adds	r0, r3, #0
10001d86:	46bd      	mov	sp, r7
10001d88:	b00c      	add	sp, #48	; 0x30
10001d8a:	bd80      	pop	{r7, pc}
10001d8c:	000003fe 	.word	0x000003fe
10001d90:	fc0080ef 	.word	0xfc0080ef

10001d94 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10001d94:	b580      	push	{r7, lr}
10001d96:	b084      	sub	sp, #16
10001d98:	af00      	add	r7, sp, #0
10001d9a:	60f8      	str	r0, [r7, #12]
10001d9c:	60b9      	str	r1, [r7, #8]
10001d9e:	603b      	str	r3, [r7, #0]
10001da0:	1dfb      	adds	r3, r7, #7
10001da2:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10001da4:	68fa      	ldr	r2, [r7, #12]
10001da6:	2384      	movs	r3, #132	; 0x84
10001da8:	005b      	lsls	r3, r3, #1
10001daa:	58d3      	ldr	r3, [r2, r3]
10001dac:	4a0e      	ldr	r2, [pc, #56]	; (10001de8 <XMC_USIC_CH_TXFIFO_Configure+0x54>)
10001dae:	4013      	ands	r3, r2
10001db0:	1c19      	adds	r1, r3, #0
10001db2:	68fa      	ldr	r2, [r7, #12]
10001db4:	2384      	movs	r3, #132	; 0x84
10001db6:	005b      	lsls	r3, r3, #1
10001db8:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001dba:	68fa      	ldr	r2, [r7, #12]
10001dbc:	2384      	movs	r3, #132	; 0x84
10001dbe:	005b      	lsls	r3, r3, #1
10001dc0:	58d3      	ldr	r3, [r2, r3]
10001dc2:	4a0a      	ldr	r2, [pc, #40]	; (10001dec <XMC_USIC_CH_TXFIFO_Configure+0x58>)
10001dc4:	401a      	ands	r2, r3
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10001dc6:	683b      	ldr	r3, [r7, #0]
10001dc8:	0219      	lsls	r1, r3, #8
10001dca:	68bb      	ldr	r3, [r7, #8]
10001dcc:	4319      	orrs	r1, r3
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
10001dce:	1dfb      	adds	r3, r7, #7
10001dd0:	781b      	ldrb	r3, [r3, #0]
10001dd2:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10001dd4:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
10001dd6:	431a      	orrs	r2, r3
10001dd8:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001dda:	68fa      	ldr	r2, [r7, #12]
10001ddc:	2384      	movs	r3, #132	; 0x84
10001dde:	005b      	lsls	r3, r3, #1
10001de0:	50d1      	str	r1, [r2, r3]
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10001de2:	46bd      	mov	sp, r7
10001de4:	b004      	add	sp, #16
10001de6:	bd80      	pop	{r7, pc}
10001de8:	f8ffffff 	.word	0xf8ffffff
10001dec:	f8ffc0c0 	.word	0xf8ffc0c0

10001df0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b084      	sub	sp, #16
10001df4:	af00      	add	r7, sp, #0
10001df6:	60f8      	str	r0, [r7, #12]
10001df8:	60b9      	str	r1, [r7, #8]
10001dfa:	603b      	str	r3, [r7, #0]
10001dfc:	1dfb      	adds	r3, r7, #7
10001dfe:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10001e00:	68fa      	ldr	r2, [r7, #12]
10001e02:	2386      	movs	r3, #134	; 0x86
10001e04:	005b      	lsls	r3, r3, #1
10001e06:	58d3      	ldr	r3, [r2, r3]
10001e08:	4a10      	ldr	r2, [pc, #64]	; (10001e4c <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
10001e0a:	4013      	ands	r3, r2
10001e0c:	1c19      	adds	r1, r3, #0
10001e0e:	68fa      	ldr	r2, [r7, #12]
10001e10:	2386      	movs	r3, #134	; 0x86
10001e12:	005b      	lsls	r3, r3, #1
10001e14:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10001e16:	68fa      	ldr	r2, [r7, #12]
10001e18:	2386      	movs	r3, #134	; 0x86
10001e1a:	005b      	lsls	r3, r3, #1
10001e1c:	58d3      	ldr	r3, [r2, r3]
10001e1e:	4a0c      	ldr	r2, [pc, #48]	; (10001e50 <XMC_USIC_CH_RXFIFO_Configure+0x60>)
10001e20:	401a      	ands	r2, r3
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10001e22:	683b      	ldr	r3, [r7, #0]
10001e24:	0219      	lsls	r1, r3, #8
10001e26:	68bb      	ldr	r3, [r7, #8]
10001e28:	4319      	orrs	r1, r3
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
10001e2a:	1dfb      	adds	r3, r7, #7
10001e2c:	781b      	ldrb	r3, [r3, #0]
10001e2e:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
10001e30:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10001e32:	4313      	orrs	r3, r2
10001e34:	2280      	movs	r2, #128	; 0x80
10001e36:	0552      	lsls	r2, r2, #21
10001e38:	431a      	orrs	r2, r3
10001e3a:	1c11      	adds	r1, r2, #0
10001e3c:	68fa      	ldr	r2, [r7, #12]
10001e3e:	2386      	movs	r3, #134	; 0x86
10001e40:	005b      	lsls	r3, r3, #1
10001e42:	50d1      	str	r1, [r2, r3]
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10001e44:	46bd      	mov	sp, r7
10001e46:	b004      	add	sp, #16
10001e48:	bd80      	pop	{r7, pc}
10001e4a:	46c0      	nop			; (mov r8, r8)
10001e4c:	f8ffffff 	.word	0xf8ffffff
10001e50:	efffc0c0 	.word	0xefffc0c0

10001e54 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
10001e54:	b580      	push	{r7, lr}
10001e56:	b084      	sub	sp, #16
10001e58:	af00      	add	r7, sp, #0
10001e5a:	60f8      	str	r0, [r7, #12]
10001e5c:	607a      	str	r2, [r7, #4]
10001e5e:	230b      	movs	r3, #11
10001e60:	18fb      	adds	r3, r7, r3
10001e62:	1c0a      	adds	r2, r1, #0
10001e64:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10001e66:	68fb      	ldr	r3, [r7, #12]
10001e68:	699b      	ldr	r3, [r3, #24]
10001e6a:	220b      	movs	r2, #11
10001e6c:	18ba      	adds	r2, r7, r2
10001e6e:	7812      	ldrb	r2, [r2, #0]
10001e70:	2107      	movs	r1, #7
10001e72:	4091      	lsls	r1, r2
10001e74:	1c0a      	adds	r2, r1, #0
10001e76:	43d2      	mvns	r2, r2
10001e78:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
10001e7a:	230b      	movs	r3, #11
10001e7c:	18fb      	adds	r3, r7, r3
10001e7e:	781b      	ldrb	r3, [r3, #0]
10001e80:	6879      	ldr	r1, [r7, #4]
10001e82:	4099      	lsls	r1, r3
10001e84:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10001e86:	431a      	orrs	r2, r3
10001e88:	68fb      	ldr	r3, [r7, #12]
10001e8a:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
10001e8c:	46bd      	mov	sp, r7
10001e8e:	b004      	add	sp, #16
10001e90:	bd80      	pop	{r7, pc}
10001e92:	46c0      	nop			; (mov r8, r8)

10001e94 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10001e94:	b580      	push	{r7, lr}
10001e96:	b082      	sub	sp, #8
10001e98:	af00      	add	r7, sp, #0
10001e9a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10001e9c:	687b      	ldr	r3, [r7, #4]
10001e9e:	4a10      	ldr	r2, [pc, #64]	; (10001ee0 <XMC_USIC_Enable+0x4c>)
10001ea0:	4293      	cmp	r3, r2
10001ea2:	d109      	bne.n	10001eb8 <XMC_USIC_Enable+0x24>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10001ea4:	2008      	movs	r0, #8
10001ea6:	f7ff fafb 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
10001eaa:	46c0      	nop			; (mov r8, r8)
10001eac:	2008      	movs	r0, #8
10001eae:	f7ff fb11 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10001eb2:	1e03      	subs	r3, r0, #0
10001eb4:	d1fa      	bne.n	10001eac <XMC_USIC_Enable+0x18>
10001eb6:	e010      	b.n	10001eda <XMC_USIC_Enable+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
10001eb8:	687b      	ldr	r3, [r7, #4]
10001eba:	4a0a      	ldr	r2, [pc, #40]	; (10001ee4 <XMC_USIC_Enable+0x50>)
10001ebc:	4293      	cmp	r3, r2
10001ebe:	d10c      	bne.n	10001eda <XMC_USIC_Enable+0x46>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10001ec0:	2380      	movs	r3, #128	; 0x80
10001ec2:	02db      	lsls	r3, r3, #11
10001ec4:	1c18      	adds	r0, r3, #0
10001ec6:	f7ff faeb 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
10001eca:	46c0      	nop			; (mov r8, r8)
10001ecc:	2380      	movs	r3, #128	; 0x80
10001ece:	02db      	lsls	r3, r3, #11
10001ed0:	1c18      	adds	r0, r3, #0
10001ed2:	f7ff faff 	bl	100014d4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10001ed6:	1e03      	subs	r3, r0, #0
10001ed8:	d1f8      	bne.n	10001ecc <XMC_USIC_Enable+0x38>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10001eda:	46bd      	mov	sp, r7
10001edc:	b002      	add	sp, #8
10001ede:	bd80      	pop	{r7, pc}
10001ee0:	48000008 	.word	0x48000008
10001ee4:	48004008 	.word	0x48004008

10001ee8 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001ee8:	b580      	push	{r7, lr}
10001eea:	af00      	add	r7, sp, #0
10001eec:	46bd      	mov	sp, r7
10001eee:	bd80      	pop	{r7, pc}

10001ef0 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10001ef0:	b580      	push	{r7, lr}
10001ef2:	b082      	sub	sp, #8
10001ef4:	af00      	add	r7, sp, #0
10001ef6:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10001ef8:	687a      	ldr	r2, [r7, #4]
10001efa:	238c      	movs	r3, #140	; 0x8c
10001efc:	005b      	lsls	r3, r3, #1
10001efe:	2180      	movs	r1, #128	; 0x80
10001f00:	0209      	lsls	r1, r1, #8
10001f02:	50d1      	str	r1, [r2, r3]
}
10001f04:	46bd      	mov	sp, r7
10001f06:	b002      	add	sp, #8
10001f08:	bd80      	pop	{r7, pc}
10001f0a:	46c0      	nop			; (mov r8, r8)

10001f0c <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10001f0c:	b580      	push	{r7, lr}
10001f0e:	b082      	sub	sp, #8
10001f10:	af00      	add	r7, sp, #0
10001f12:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10001f14:	687a      	ldr	r2, [r7, #4]
10001f16:	238a      	movs	r3, #138	; 0x8a
10001f18:	005b      	lsls	r3, r3, #1
10001f1a:	58d2      	ldr	r2, [r2, r3]
10001f1c:	2380      	movs	r3, #128	; 0x80
10001f1e:	015b      	lsls	r3, r3, #5
10001f20:	4013      	ands	r3, r2
10001f22:	1e5a      	subs	r2, r3, #1
10001f24:	4193      	sbcs	r3, r2
10001f26:	b2db      	uxtb	r3, r3
}
10001f28:	1c18      	adds	r0, r3, #0
10001f2a:	46bd      	mov	sp, r7
10001f2c:	b002      	add	sp, #8
10001f2e:	bd80      	pop	{r7, pc}

10001f30 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10001f30:	b580      	push	{r7, lr}
10001f32:	b082      	sub	sp, #8
10001f34:	af00      	add	r7, sp, #0
10001f36:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
10001f38:	687a      	ldr	r2, [r7, #4]
10001f3a:	238a      	movs	r3, #138	; 0x8a
10001f3c:	005b      	lsls	r3, r3, #1
10001f3e:	58d2      	ldr	r2, [r2, r3]
10001f40:	2380      	movs	r3, #128	; 0x80
10001f42:	011b      	lsls	r3, r3, #4
10001f44:	4013      	ands	r3, r2
10001f46:	1e5a      	subs	r2, r3, #1
10001f48:	4193      	sbcs	r3, r2
10001f4a:	b2db      	uxtb	r3, r3
}
10001f4c:	1c18      	adds	r0, r3, #0
10001f4e:	46bd      	mov	sp, r7
10001f50:	b002      	add	sp, #8
10001f52:	bd80      	pop	{r7, pc}

10001f54 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10001f54:	b590      	push	{r4, r7, lr}
10001f56:	b085      	sub	sp, #20
10001f58:	af00      	add	r7, sp, #0
10001f5a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10001f5c:	230f      	movs	r3, #15
10001f5e:	18fb      	adds	r3, r7, r3
10001f60:	2200      	movs	r2, #0
10001f62:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10001f64:	687b      	ldr	r3, [r7, #4]
10001f66:	685b      	ldr	r3, [r3, #4]
10001f68:	685b      	ldr	r3, [r3, #4]
10001f6a:	220f      	movs	r2, #15
10001f6c:	18bc      	adds	r4, r7, r2
10001f6e:	4798      	blx	r3
10001f70:	1c03      	adds	r3, r0, #0
10001f72:	7023      	strb	r3, [r4, #0]

  return status;
10001f74:	230f      	movs	r3, #15
10001f76:	18fb      	adds	r3, r7, r3
10001f78:	781b      	ldrb	r3, [r3, #0]
}
10001f7a:	1c18      	adds	r0, r3, #0
10001f7c:	46bd      	mov	sp, r7
10001f7e:	b005      	add	sp, #20
10001f80:	bd90      	pop	{r4, r7, pc}
10001f82:	46c0      	nop			; (mov r8, r8)

10001f84 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10001f84:	b590      	push	{r4, r7, lr}
10001f86:	b087      	sub	sp, #28
10001f88:	af00      	add	r7, sp, #0
10001f8a:	60f8      	str	r0, [r7, #12]
10001f8c:	60b9      	str	r1, [r7, #8]
10001f8e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10001f90:	2317      	movs	r3, #23
10001f92:	18fb      	adds	r3, r7, r3
10001f94:	2204      	movs	r2, #4
10001f96:	701a      	strb	r2, [r3, #0]

  switch(handle->config->transmit_mode)
10001f98:	68fb      	ldr	r3, [r7, #12]
10001f9a:	685b      	ldr	r3, [r3, #4]
10001f9c:	2221      	movs	r2, #33	; 0x21
10001f9e:	5c9b      	ldrb	r3, [r3, r2]
10001fa0:	2b02      	cmp	r3, #2
10001fa2:	d000      	beq.n	10001fa6 <UART_Transmit+0x22>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10001fa4:	e00c      	b.n	10001fc0 <UART_Transmit+0x3c>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
10001fa6:	2317      	movs	r3, #23
10001fa8:	18fc      	adds	r4, r7, r3
10001faa:	68f9      	ldr	r1, [r7, #12]
10001fac:	68ba      	ldr	r2, [r7, #8]
10001fae:	687b      	ldr	r3, [r7, #4]
10001fb0:	1c08      	adds	r0, r1, #0
10001fb2:	1c11      	adds	r1, r2, #0
10001fb4:	1c1a      	adds	r2, r3, #0
10001fb6:	f000 f80b 	bl	10001fd0 <UART_lStartTransmitPolling>
10001fba:	1c03      	adds	r3, r0, #0
10001fbc:	7023      	strb	r3, [r4, #0]
    break;
10001fbe:	46c0      	nop			; (mov r8, r8)
#endif
  default:
    break;
  }
  return ret_stat;
10001fc0:	2317      	movs	r3, #23
10001fc2:	18fb      	adds	r3, r7, r3
10001fc4:	781b      	ldrb	r3, [r3, #0]
}
10001fc6:	1c18      	adds	r0, r3, #0
10001fc8:	46bd      	mov	sp, r7
10001fca:	b007      	add	sp, #28
10001fcc:	bd90      	pop	{r4, r7, pc}
10001fce:	46c0      	nop			; (mov r8, r8)

10001fd0 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10001fd0:	b580      	push	{r7, lr}
10001fd2:	b086      	sub	sp, #24
10001fd4:	af00      	add	r7, sp, #0
10001fd6:	60f8      	str	r0, [r7, #12]
10001fd8:	60b9      	str	r1, [r7, #8]
10001fda:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
10001fdc:	2317      	movs	r3, #23
10001fde:	18fb      	adds	r3, r7, r3
10001fe0:	2203      	movs	r2, #3
10001fe2:	701a      	strb	r2, [r3, #0]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
10001fe4:	68bb      	ldr	r3, [r7, #8]
10001fe6:	2b00      	cmp	r3, #0
10001fe8:	d05c      	beq.n	100020a4 <UART_lStartTransmitPolling+0xd4>
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	2b00      	cmp	r3, #0
10001fee:	d059      	beq.n	100020a4 <UART_lStartTransmitPolling+0xd4>
  {
    ret_stat = UART_STATUS_BUSY;
10001ff0:	2317      	movs	r3, #23
10001ff2:	18fb      	adds	r3, r7, r3
10001ff4:	2202      	movs	r2, #2
10001ff6:	701a      	strb	r2, [r3, #0]
    if (handle->runtime->tx_busy == false)
10001ff8:	68fb      	ldr	r3, [r7, #12]
10001ffa:	689b      	ldr	r3, [r3, #8]
10001ffc:	7e1b      	ldrb	r3, [r3, #24]
10001ffe:	b2db      	uxtb	r3, r3
10002000:	2201      	movs	r2, #1
10002002:	4053      	eors	r3, r2
10002004:	b2db      	uxtb	r3, r3
10002006:	2b00      	cmp	r3, #0
10002008:	d04c      	beq.n	100020a4 <UART_lStartTransmitPolling+0xd4>
    {
      handle->runtime->tx_busy = true;
1000200a:	68fb      	ldr	r3, [r7, #12]
1000200c:	689b      	ldr	r3, [r3, #8]
1000200e:	2201      	movs	r2, #1
10002010:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002012:	68fb      	ldr	r3, [r7, #12]
10002014:	685b      	ldr	r3, [r3, #4]
10002016:	2223      	movs	r2, #35	; 0x23
10002018:	5c9b      	ldrb	r3, [r3, r2]
1000201a:	2b00      	cmp	r3, #0
1000201c:	d004      	beq.n	10002028 <UART_lStartTransmitPolling+0x58>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
1000201e:	68fb      	ldr	r3, [r7, #12]
10002020:	681b      	ldr	r3, [r3, #0]
10002022:	1c18      	adds	r0, r3, #0
10002024:	f7ff ff64 	bl	10001ef0 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
10002028:	2300      	movs	r3, #0
1000202a:	613b      	str	r3, [r7, #16]
1000202c:	e01b      	b.n	10002066 <UART_lStartTransmitPolling+0x96>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000202e:	68fb      	ldr	r3, [r7, #12]
10002030:	685b      	ldr	r3, [r3, #4]
10002032:	2223      	movs	r2, #35	; 0x23
10002034:	5c9b      	ldrb	r3, [r3, r2]
10002036:	2b00      	cmp	r3, #0
10002038:	d007      	beq.n	1000204a <UART_lStartTransmitPolling+0x7a>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
1000203a:	46c0      	nop			; (mov r8, r8)
1000203c:	68fb      	ldr	r3, [r7, #12]
1000203e:	681b      	ldr	r3, [r3, #0]
10002040:	1c18      	adds	r0, r3, #0
10002042:	f7ff ff63 	bl	10001f0c <XMC_USIC_CH_TXFIFO_IsFull>
10002046:	1e03      	subs	r3, r0, #0
10002048:	d1f8      	bne.n	1000203c <UART_lStartTransmitPolling+0x6c>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
1000204a:	68fb      	ldr	r3, [r7, #12]
1000204c:	6819      	ldr	r1, [r3, #0]
1000204e:	68ba      	ldr	r2, [r7, #8]
10002050:	693b      	ldr	r3, [r7, #16]
10002052:	18d3      	adds	r3, r2, r3
10002054:	781b      	ldrb	r3, [r3, #0]
10002056:	b29b      	uxth	r3, r3
10002058:	1c08      	adds	r0, r1, #0
1000205a:	1c19      	adds	r1, r3, #0
1000205c:	f7ff fd30 	bl	10001ac0 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
10002060:	693b      	ldr	r3, [r7, #16]
10002062:	3301      	adds	r3, #1
10002064:	613b      	str	r3, [r7, #16]
10002066:	693a      	ldr	r2, [r7, #16]
10002068:	687b      	ldr	r3, [r7, #4]
1000206a:	429a      	cmp	r2, r3
1000206c:	d3df      	bcc.n	1000202e <UART_lStartTransmitPolling+0x5e>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000206e:	68fb      	ldr	r3, [r7, #12]
10002070:	685b      	ldr	r3, [r3, #4]
10002072:	2223      	movs	r2, #35	; 0x23
10002074:	5c9b      	ldrb	r3, [r3, r2]
10002076:	2b00      	cmp	r3, #0
10002078:	d00c      	beq.n	10002094 <UART_lStartTransmitPolling+0xc4>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
1000207a:	46c0      	nop			; (mov r8, r8)
1000207c:	68fb      	ldr	r3, [r7, #12]
1000207e:	681b      	ldr	r3, [r3, #0]
10002080:	1c18      	adds	r0, r3, #0
10002082:	f7ff ff55 	bl	10001f30 <XMC_USIC_CH_TXFIFO_IsEmpty>
10002086:	1c03      	adds	r3, r0, #0
10002088:	1c1a      	adds	r2, r3, #0
1000208a:	2301      	movs	r3, #1
1000208c:	4053      	eors	r3, r2
1000208e:	b2db      	uxtb	r3, r3
10002090:	2b00      	cmp	r3, #0
10002092:	d1f3      	bne.n	1000207c <UART_lStartTransmitPolling+0xac>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
10002094:	2317      	movs	r3, #23
10002096:	18fb      	adds	r3, r7, r3
10002098:	2200      	movs	r2, #0
1000209a:	701a      	strb	r2, [r3, #0]
      handle->runtime->tx_busy = false;
1000209c:	68fb      	ldr	r3, [r7, #12]
1000209e:	689b      	ldr	r3, [r3, #8]
100020a0:	2200      	movs	r2, #0
100020a2:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
100020a4:	2317      	movs	r3, #23
100020a6:	18fb      	adds	r3, r7, r3
100020a8:	781b      	ldrb	r3, [r3, #0]
}
100020aa:	1c18      	adds	r0, r3, #0
100020ac:	46bd      	mov	sp, r7
100020ae:	b006      	add	sp, #24
100020b0:	bd80      	pop	{r7, pc}
100020b2:	46c0      	nop			; (mov r8, r8)

100020b4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100020b4:	b580      	push	{r7, lr}
100020b6:	b082      	sub	sp, #8
100020b8:	af00      	add	r7, sp, #0
100020ba:	6078      	str	r0, [r7, #4]
100020bc:	1c08      	adds	r0, r1, #0
100020be:	1c11      	adds	r1, r2, #0
100020c0:	1cfb      	adds	r3, r7, #3
100020c2:	1c02      	adds	r2, r0, #0
100020c4:	701a      	strb	r2, [r3, #0]
100020c6:	1cbb      	adds	r3, r7, #2
100020c8:	1c0a      	adds	r2, r1, #0
100020ca:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100020cc:	1cfb      	adds	r3, r7, #3
100020ce:	7818      	ldrb	r0, [r3, #0]
100020d0:	1cfb      	adds	r3, r7, #3
100020d2:	781b      	ldrb	r3, [r3, #0]
100020d4:	687a      	ldr	r2, [r7, #4]
100020d6:	3306      	adds	r3, #6
100020d8:	009b      	lsls	r3, r3, #2
100020da:	18d3      	adds	r3, r2, r3
100020dc:	685b      	ldr	r3, [r3, #4]
100020de:	2207      	movs	r2, #7
100020e0:	4393      	bics	r3, r2
100020e2:	1c1a      	adds	r2, r3, #0
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
100020e4:	1cbb      	adds	r3, r7, #2
100020e6:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100020e8:	431a      	orrs	r2, r3
100020ea:	6879      	ldr	r1, [r7, #4]
100020ec:	1d83      	adds	r3, r0, #6
100020ee:	009b      	lsls	r3, r3, #2
100020f0:	18cb      	adds	r3, r1, r3
100020f2:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
100020f4:	46bd      	mov	sp, r7
100020f6:	b002      	add	sp, #8
100020f8:	bd80      	pop	{r7, pc}
100020fa:	46c0      	nop			; (mov r8, r8)

100020fc <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
100020fc:	b580      	push	{r7, lr}
100020fe:	b082      	sub	sp, #8
10002100:	af00      	add	r7, sp, #0
10002102:	6078      	str	r0, [r7, #4]
10002104:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
10002106:	687a      	ldr	r2, [r7, #4]
10002108:	683b      	ldr	r3, [r7, #0]
1000210a:	1c10      	adds	r0, r2, #0
1000210c:	1c19      	adds	r1, r3, #0
1000210e:	2201      	movs	r2, #1
10002110:	f7ff fc68 	bl	100019e4 <XMC_UART_CH_InitEx>
}
10002114:	46bd      	mov	sp, r7
10002116:	b002      	add	sp, #8
10002118:	bd80      	pop	{r7, pc}
1000211a:	46c0      	nop			; (mov r8, r8)

1000211c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
1000211c:	b580      	push	{r7, lr}
1000211e:	b082      	sub	sp, #8
10002120:	af00      	add	r7, sp, #0
10002122:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10002124:	687b      	ldr	r3, [r7, #4]
10002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002128:	220f      	movs	r2, #15
1000212a:	4393      	bics	r3, r2
1000212c:	2202      	movs	r2, #2
1000212e:	431a      	orrs	r2, r3
10002130:	687b      	ldr	r3, [r7, #4]
10002132:	641a      	str	r2, [r3, #64]	; 0x40
}
10002134:	46bd      	mov	sp, r7
10002136:	b002      	add	sp, #8
10002138:	bd80      	pop	{r7, pc}
1000213a:	46c0      	nop			; (mov r8, r8)

1000213c <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
1000213c:	b580      	push	{r7, lr}
1000213e:	b082      	sub	sp, #8
10002140:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10002142:	1dfb      	adds	r3, r7, #7
10002144:	2200      	movs	r2, #0
10002146:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &UART_0_rx_pin_config);
10002148:	4a21      	ldr	r2, [pc, #132]	; (100021d0 <UART_0_init+0x94>)
1000214a:	4b22      	ldr	r3, [pc, #136]	; (100021d4 <UART_0_init+0x98>)
1000214c:	1c10      	adds	r0, r2, #0
1000214e:	2103      	movs	r1, #3
10002150:	1c1a      	adds	r2, r3, #0
10002152:	f7ff f819 	bl	10001188 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &UART_0_channel_config);
10002156:	4a20      	ldr	r2, [pc, #128]	; (100021d8 <UART_0_init+0x9c>)
10002158:	4b20      	ldr	r3, [pc, #128]	; (100021dc <UART_0_init+0xa0>)
1000215a:	1c10      	adds	r0, r2, #0
1000215c:	1c19      	adds	r1, r3, #0
1000215e:	f7ff ffcd 	bl	100020fc <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 0U);
10002162:	4b1d      	ldr	r3, [pc, #116]	; (100021d8 <UART_0_init+0x9c>)
10002164:	1c18      	adds	r0, r3, #0
10002166:	2100      	movs	r1, #0
10002168:	2200      	movs	r2, #0
1000216a:	f7ff ffa3 	bl	100020b4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
1000216e:	4b1a      	ldr	r3, [pc, #104]	; (100021d8 <UART_0_init+0x9c>)
10002170:	1c18      	adds	r0, r3, #0
10002172:	2103      	movs	r1, #3
10002174:	2200      	movs	r2, #0
10002176:	f7ff ff9d 	bl	100020b4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
1000217a:	4b17      	ldr	r3, [pc, #92]	; (100021d8 <UART_0_init+0x9c>)
1000217c:	1c18      	adds	r0, r3, #0
1000217e:	2105      	movs	r1, #5
10002180:	2200      	movs	r2, #0
10002182:	f7ff ff97 	bl	100020b4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
10002186:	4b14      	ldr	r3, [pc, #80]	; (100021d8 <UART_0_init+0x9c>)
10002188:	1c18      	adds	r0, r3, #0
1000218a:	2110      	movs	r1, #16
1000218c:	2204      	movs	r2, #4
1000218e:	2301      	movs	r3, #1
10002190:	f7ff fe00 	bl	10001d94 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
10002194:	4b10      	ldr	r3, [pc, #64]	; (100021d8 <UART_0_init+0x9c>)
10002196:	1c18      	adds	r0, r3, #0
10002198:	2100      	movs	r1, #0
1000219a:	2204      	movs	r2, #4
1000219c:	230f      	movs	r3, #15
1000219e:	f7ff fe27 	bl	10001df0 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        15U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);
100021a2:	4b0d      	ldr	r3, [pc, #52]	; (100021d8 <UART_0_init+0x9c>)
100021a4:	1c18      	adds	r0, r3, #0
100021a6:	f7ff ffb9 	bl	1000211c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 2U, &UART_0_tx_pin_config);
100021aa:	4a09      	ldr	r2, [pc, #36]	; (100021d0 <UART_0_init+0x94>)
100021ac:	4b0c      	ldr	r3, [pc, #48]	; (100021e0 <UART_0_init+0xa4>)
100021ae:	1c10      	adds	r0, r2, #0
100021b0:	2102      	movs	r1, #2
100021b2:	1c1a      	adds	r2, r3, #0
100021b4:	f7fe ffe8 	bl	10001188 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
100021b8:	4b07      	ldr	r3, [pc, #28]	; (100021d8 <UART_0_init+0x9c>)
100021ba:	1c18      	adds	r0, r3, #0
100021bc:	2110      	movs	r1, #16
100021be:	2200      	movs	r2, #0
100021c0:	f7ff fe48 	bl	10001e54 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
100021c4:	1dfb      	adds	r3, r7, #7
100021c6:	781b      	ldrb	r3, [r3, #0]
}
100021c8:	1c18      	adds	r0, r3, #0
100021ca:	46bd      	mov	sp, r7
100021cc:	b002      	add	sp, #8
100021ce:	bd80      	pop	{r7, pc}
100021d0:	40040100 	.word	0x40040100
100021d4:	10002a40 	.word	0x10002a40
100021d8:	48000200 	.word	0x48000200
100021dc:	100029f8 	.word	0x100029f8
100021e0:	10002a04 	.word	0x10002a04

100021e4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100021e4:	b580      	push	{r7, lr}
100021e6:	b082      	sub	sp, #8
100021e8:	af00      	add	r7, sp, #0
100021ea:	6078      	str	r0, [r7, #4]
100021ec:	1c0a      	adds	r2, r1, #0
100021ee:	1cfb      	adds	r3, r7, #3
100021f0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
100021f2:	1cfb      	adds	r3, r7, #3
100021f4:	781b      	ldrb	r3, [r3, #0]
100021f6:	2201      	movs	r2, #1
100021f8:	409a      	lsls	r2, r3
100021fa:	687b      	ldr	r3, [r7, #4]
100021fc:	60da      	str	r2, [r3, #12]
}
100021fe:	46bd      	mov	sp, r7
10002200:	b002      	add	sp, #8
10002202:	bd80      	pop	{r7, pc}

10002204 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002204:	b580      	push	{r7, lr}
10002206:	b082      	sub	sp, #8
10002208:	af00      	add	r7, sp, #0
1000220a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000220c:	687b      	ldr	r3, [r7, #4]
1000220e:	2201      	movs	r2, #1
10002210:	60da      	str	r2, [r3, #12]
}
10002212:	46bd      	mov	sp, r7
10002214:	b002      	add	sp, #8
10002216:	bd80      	pop	{r7, pc}

10002218 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10002218:	b580      	push	{r7, lr}
1000221a:	b082      	sub	sp, #8
1000221c:	af00      	add	r7, sp, #0
1000221e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002220:	687b      	ldr	r3, [r7, #4]
10002222:	2202      	movs	r2, #2
10002224:	611a      	str	r2, [r3, #16]
}
10002226:	46bd      	mov	sp, r7
10002228:	b002      	add	sp, #8
1000222a:	bd80      	pop	{r7, pc}

1000222c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
1000222c:	b580      	push	{r7, lr}
1000222e:	b082      	sub	sp, #8
10002230:	af00      	add	r7, sp, #0
10002232:	6078      	str	r0, [r7, #4]
10002234:	1c0a      	adds	r2, r1, #0
10002236:	1cbb      	adds	r3, r7, #2
10002238:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000223a:	1cbb      	adds	r3, r7, #2
1000223c:	881a      	ldrh	r2, [r3, #0]
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	635a      	str	r2, [r3, #52]	; 0x34
}
10002242:	46bd      	mov	sp, r7
10002244:	b002      	add	sp, #8
10002246:	bd80      	pop	{r7, pc}

10002248 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002248:	b580      	push	{r7, lr}
1000224a:	b082      	sub	sp, #8
1000224c:	af00      	add	r7, sp, #0
1000224e:	6078      	str	r0, [r7, #4]
10002250:	1c0a      	adds	r2, r1, #0
10002252:	1cbb      	adds	r3, r7, #2
10002254:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002256:	1cbb      	adds	r3, r7, #2
10002258:	881a      	ldrh	r2, [r3, #0]
1000225a:	687b      	ldr	r3, [r7, #4]
1000225c:	63da      	str	r2, [r3, #60]	; 0x3c
}
1000225e:	46bd      	mov	sp, r7
10002260:	b002      	add	sp, #8
10002262:	bd80      	pop	{r7, pc}

10002264 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002264:	b580      	push	{r7, lr}
10002266:	b082      	sub	sp, #8
10002268:	af00      	add	r7, sp, #0
1000226a:	6078      	str	r0, [r7, #4]
1000226c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
1000226e:	687b      	ldr	r3, [r7, #4]
10002270:	683a      	ldr	r2, [r7, #0]
10002272:	611a      	str	r2, [r3, #16]
}
10002274:	46bd      	mov	sp, r7
10002276:	b002      	add	sp, #8
10002278:	bd80      	pop	{r7, pc}
1000227a:	46c0      	nop			; (mov r8, r8)

1000227c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
1000227c:	b580      	push	{r7, lr}
1000227e:	b082      	sub	sp, #8
10002280:	af00      	add	r7, sp, #0
10002282:	6078      	str	r0, [r7, #4]
10002284:	1c0a      	adds	r2, r1, #0
10002286:	1cfb      	adds	r3, r7, #3
10002288:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000228a:	687b      	ldr	r3, [r7, #4]
1000228c:	22a4      	movs	r2, #164	; 0xa4
1000228e:	589a      	ldr	r2, [r3, r2]
10002290:	1cfb      	adds	r3, r7, #3
10002292:	781b      	ldrb	r3, [r3, #0]
10002294:	2101      	movs	r1, #1
10002296:	4099      	lsls	r1, r3
10002298:	1c0b      	adds	r3, r1, #0
1000229a:	431a      	orrs	r2, r3
1000229c:	687b      	ldr	r3, [r7, #4]
1000229e:	21a4      	movs	r1, #164	; 0xa4
100022a0:	505a      	str	r2, [r3, r1]
}
100022a2:	46bd      	mov	sp, r7
100022a4:	b002      	add	sp, #8
100022a6:	bd80      	pop	{r7, pc}

100022a8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
100022a8:	b590      	push	{r4, r7, lr}
100022aa:	b085      	sub	sp, #20
100022ac:	af00      	add	r7, sp, #0
100022ae:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
100022b0:	230f      	movs	r3, #15
100022b2:	18fb      	adds	r3, r7, r3
100022b4:	2200      	movs	r2, #0
100022b6:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100022b8:	687b      	ldr	r3, [r7, #4]
100022ba:	2226      	movs	r2, #38	; 0x26
100022bc:	5c9b      	ldrb	r3, [r3, r2]
100022be:	2201      	movs	r2, #1
100022c0:	4053      	eors	r3, r2
100022c2:	b2db      	uxtb	r3, r3
100022c4:	2b00      	cmp	r3, #0
100022c6:	d00c      	beq.n	100022e2 <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100022c8:	687b      	ldr	r3, [r7, #4]
100022ca:	2221      	movs	r2, #33	; 0x21
100022cc:	5c9b      	ldrb	r3, [r3, r2]
100022ce:	2b00      	cmp	r3, #0
100022d0:	d107      	bne.n	100022e2 <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
100022d2:	230f      	movs	r3, #15
100022d4:	18fc      	adds	r4, r7, r3
100022d6:	687b      	ldr	r3, [r7, #4]
100022d8:	1c18      	adds	r0, r3, #0
100022da:	f000 f809 	bl	100022f0 <TIMER_CCU4_lInit>
100022de:	1c03      	adds	r3, r0, #0
100022e0:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
100022e2:	230f      	movs	r3, #15
100022e4:	18fb      	adds	r3, r7, r3
100022e6:	781b      	ldrb	r3, [r3, #0]
}
100022e8:	1c18      	adds	r0, r3, #0
100022ea:	46bd      	mov	sp, r7
100022ec:	b005      	add	sp, #20
100022ee:	bd90      	pop	{r4, r7, pc}

100022f0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
100022f0:	b590      	push	{r4, r7, lr}
100022f2:	b085      	sub	sp, #20
100022f4:	af00      	add	r7, sp, #0
100022f6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
100022f8:	687b      	ldr	r3, [r7, #4]
100022fa:	691b      	ldr	r3, [r3, #16]
100022fc:	220f      	movs	r2, #15
100022fe:	18bc      	adds	r4, r7, r2
10002300:	1c18      	adds	r0, r3, #0
10002302:	f000 f92f 	bl	10002564 <GLOBAL_CCU4_Init>
10002306:	1c03      	adds	r3, r0, #0
10002308:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000230a:	687b      	ldr	r3, [r7, #4]
1000230c:	691b      	ldr	r3, [r3, #16]
1000230e:	689a      	ldr	r2, [r3, #8]
10002310:	687b      	ldr	r3, [r7, #4]
10002312:	7e1b      	ldrb	r3, [r3, #24]
10002314:	1c10      	adds	r0, r2, #0
10002316:	1c19      	adds	r1, r3, #0
10002318:	f7ff ff64 	bl	100021e4 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	695a      	ldr	r2, [r3, #20]
10002320:	687b      	ldr	r3, [r7, #4]
10002322:	69db      	ldr	r3, [r3, #28]
10002324:	1c10      	adds	r0, r2, #0
10002326:	1c19      	adds	r1, r3, #0
10002328:	f7ff fa44 	bl	100017b4 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
1000232c:	687b      	ldr	r3, [r7, #4]
1000232e:	1c18      	adds	r0, r3, #0
10002330:	f000 f830 	bl	10002394 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10002334:	687b      	ldr	r3, [r7, #4]
10002336:	2225      	movs	r2, #37	; 0x25
10002338:	5c9b      	ldrb	r3, [r3, r2]
1000233a:	2b00      	cmp	r3, #0
1000233c:	d00f      	beq.n	1000235e <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000233e:	687b      	ldr	r3, [r7, #4]
10002340:	6959      	ldr	r1, [r3, #20]
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	2220      	movs	r2, #32
10002346:	5c9b      	ldrb	r3, [r3, r2]
10002348:	1c08      	adds	r0, r1, #0
1000234a:	2100      	movs	r1, #0
1000234c:	1c1a      	adds	r2, r3, #0
1000234e:	f7ff fa65 	bl	1000181c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	695b      	ldr	r3, [r3, #20]
10002356:	1c18      	adds	r0, r3, #0
10002358:	2100      	movs	r1, #0
1000235a:	f7ff ff8f 	bl	1000227c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000235e:	687b      	ldr	r3, [r7, #4]
10002360:	695b      	ldr	r3, [r3, #20]
10002362:	1c18      	adds	r0, r3, #0
10002364:	f7ff ff58 	bl	10002218 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
10002368:	687b      	ldr	r3, [r7, #4]
1000236a:	2226      	movs	r2, #38	; 0x26
1000236c:	2101      	movs	r1, #1
1000236e:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10002370:	687b      	ldr	r3, [r7, #4]
10002372:	2224      	movs	r2, #36	; 0x24
10002374:	5c9b      	ldrb	r3, [r3, r2]
10002376:	2b00      	cmp	r3, #0
10002378:	d004      	beq.n	10002384 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000237a:	687b      	ldr	r3, [r7, #4]
1000237c:	695b      	ldr	r3, [r3, #20]
1000237e:	1c18      	adds	r0, r3, #0
10002380:	f7ff ff40 	bl	10002204 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
10002384:	230f      	movs	r3, #15
10002386:	18fb      	adds	r3, r7, r3
10002388:	781b      	ldrb	r3, [r3, #0]
}
1000238a:	1c18      	adds	r0, r3, #0
1000238c:	46bd      	mov	sp, r7
1000238e:	b005      	add	sp, #20
10002390:	bd90      	pop	{r4, r7, pc}
10002392:	46c0      	nop			; (mov r8, r8)

10002394 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
10002394:	b580      	push	{r7, lr}
10002396:	b082      	sub	sp, #8
10002398:	af00      	add	r7, sp, #0
1000239a:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
1000239c:	687b      	ldr	r3, [r7, #4]
1000239e:	695a      	ldr	r2, [r3, #20]
100023a0:	687b      	ldr	r3, [r7, #4]
100023a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100023a4:	1c10      	adds	r0, r2, #0
100023a6:	1c19      	adds	r1, r3, #0
100023a8:	f7ff ff40 	bl	1000222c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
100023ac:	687b      	ldr	r3, [r7, #4]
100023ae:	695b      	ldr	r3, [r3, #20]
100023b0:	1c18      	adds	r0, r3, #0
100023b2:	2100      	movs	r1, #0
100023b4:	f7ff ff48 	bl	10002248 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
100023b8:	687b      	ldr	r3, [r7, #4]
100023ba:	691b      	ldr	r3, [r3, #16]
100023bc:	689a      	ldr	r2, [r3, #8]
100023be:	687b      	ldr	r3, [r7, #4]
100023c0:	68db      	ldr	r3, [r3, #12]
100023c2:	1c10      	adds	r0, r2, #0
100023c4:	1c19      	adds	r1, r3, #0
100023c6:	f7ff ff4d 	bl	10002264 <XMC_CCU4_EnableShadowTransfer>
}
100023ca:	46bd      	mov	sp, r7
100023cc:	b002      	add	sp, #8
100023ce:	bd80      	pop	{r7, pc}

100023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100023d0:	b580      	push	{r7, lr}
100023d2:	b082      	sub	sp, #8
100023d4:	af00      	add	r7, sp, #0
100023d6:	1c02      	adds	r2, r0, #0
100023d8:	1dfb      	adds	r3, r7, #7
100023da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100023dc:	1dfb      	adds	r3, r7, #7
100023de:	781b      	ldrb	r3, [r3, #0]
100023e0:	2b7f      	cmp	r3, #127	; 0x7f
100023e2:	d809      	bhi.n	100023f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100023e4:	4b06      	ldr	r3, [pc, #24]	; (10002400 <__NVIC_EnableIRQ+0x30>)
100023e6:	1dfa      	adds	r2, r7, #7
100023e8:	7812      	ldrb	r2, [r2, #0]
100023ea:	1c11      	adds	r1, r2, #0
100023ec:	221f      	movs	r2, #31
100023ee:	400a      	ands	r2, r1
100023f0:	2101      	movs	r1, #1
100023f2:	4091      	lsls	r1, r2
100023f4:	1c0a      	adds	r2, r1, #0
100023f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100023f8:	46bd      	mov	sp, r7
100023fa:	b002      	add	sp, #8
100023fc:	bd80      	pop	{r7, pc}
100023fe:	46c0      	nop			; (mov r8, r8)
10002400:	e000e100 	.word	0xe000e100

10002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002404:	b5b0      	push	{r4, r5, r7, lr}
10002406:	b082      	sub	sp, #8
10002408:	af00      	add	r7, sp, #0
1000240a:	1c02      	adds	r2, r0, #0
1000240c:	6039      	str	r1, [r7, #0]
1000240e:	1dfb      	adds	r3, r7, #7
10002410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002412:	1dfb      	adds	r3, r7, #7
10002414:	781b      	ldrb	r3, [r3, #0]
10002416:	2b7f      	cmp	r3, #127	; 0x7f
10002418:	d827      	bhi.n	1000246a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000241a:	4c2d      	ldr	r4, [pc, #180]	; (100024d0 <__NVIC_SetPriority+0xcc>)
1000241c:	1dfb      	adds	r3, r7, #7
1000241e:	781b      	ldrb	r3, [r3, #0]
10002420:	b25b      	sxtb	r3, r3
10002422:	089b      	lsrs	r3, r3, #2
10002424:	492a      	ldr	r1, [pc, #168]	; (100024d0 <__NVIC_SetPriority+0xcc>)
10002426:	1dfa      	adds	r2, r7, #7
10002428:	7812      	ldrb	r2, [r2, #0]
1000242a:	b252      	sxtb	r2, r2
1000242c:	0892      	lsrs	r2, r2, #2
1000242e:	32c0      	adds	r2, #192	; 0xc0
10002430:	0092      	lsls	r2, r2, #2
10002432:	5852      	ldr	r2, [r2, r1]
10002434:	1df9      	adds	r1, r7, #7
10002436:	7809      	ldrb	r1, [r1, #0]
10002438:	1c08      	adds	r0, r1, #0
1000243a:	2103      	movs	r1, #3
1000243c:	4001      	ands	r1, r0
1000243e:	00c9      	lsls	r1, r1, #3
10002440:	1c08      	adds	r0, r1, #0
10002442:	21ff      	movs	r1, #255	; 0xff
10002444:	4081      	lsls	r1, r0
10002446:	43c9      	mvns	r1, r1
10002448:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000244a:	683a      	ldr	r2, [r7, #0]
1000244c:	0192      	lsls	r2, r2, #6
1000244e:	20ff      	movs	r0, #255	; 0xff
10002450:	4002      	ands	r2, r0
10002452:	1df8      	adds	r0, r7, #7
10002454:	7800      	ldrb	r0, [r0, #0]
10002456:	1c05      	adds	r5, r0, #0
10002458:	2003      	movs	r0, #3
1000245a:	4028      	ands	r0, r5
1000245c:	00c0      	lsls	r0, r0, #3
1000245e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002460:	430a      	orrs	r2, r1
10002462:	33c0      	adds	r3, #192	; 0xc0
10002464:	009b      	lsls	r3, r3, #2
10002466:	511a      	str	r2, [r3, r4]
10002468:	e02e      	b.n	100024c8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000246a:	4c1a      	ldr	r4, [pc, #104]	; (100024d4 <__NVIC_SetPriority+0xd0>)
1000246c:	1dfb      	adds	r3, r7, #7
1000246e:	781b      	ldrb	r3, [r3, #0]
10002470:	1c1a      	adds	r2, r3, #0
10002472:	230f      	movs	r3, #15
10002474:	4013      	ands	r3, r2
10002476:	3b08      	subs	r3, #8
10002478:	0899      	lsrs	r1, r3, #2
1000247a:	4a16      	ldr	r2, [pc, #88]	; (100024d4 <__NVIC_SetPriority+0xd0>)
1000247c:	1dfb      	adds	r3, r7, #7
1000247e:	781b      	ldrb	r3, [r3, #0]
10002480:	1c18      	adds	r0, r3, #0
10002482:	230f      	movs	r3, #15
10002484:	4003      	ands	r3, r0
10002486:	3b08      	subs	r3, #8
10002488:	089b      	lsrs	r3, r3, #2
1000248a:	3306      	adds	r3, #6
1000248c:	009b      	lsls	r3, r3, #2
1000248e:	18d3      	adds	r3, r2, r3
10002490:	685b      	ldr	r3, [r3, #4]
10002492:	1dfa      	adds	r2, r7, #7
10002494:	7812      	ldrb	r2, [r2, #0]
10002496:	1c10      	adds	r0, r2, #0
10002498:	2203      	movs	r2, #3
1000249a:	4002      	ands	r2, r0
1000249c:	00d2      	lsls	r2, r2, #3
1000249e:	1c10      	adds	r0, r2, #0
100024a0:	22ff      	movs	r2, #255	; 0xff
100024a2:	4082      	lsls	r2, r0
100024a4:	43d2      	mvns	r2, r2
100024a6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100024a8:	683b      	ldr	r3, [r7, #0]
100024aa:	019b      	lsls	r3, r3, #6
100024ac:	20ff      	movs	r0, #255	; 0xff
100024ae:	4003      	ands	r3, r0
100024b0:	1df8      	adds	r0, r7, #7
100024b2:	7800      	ldrb	r0, [r0, #0]
100024b4:	1c05      	adds	r5, r0, #0
100024b6:	2003      	movs	r0, #3
100024b8:	4028      	ands	r0, r5
100024ba:	00c0      	lsls	r0, r0, #3
100024bc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100024be:	431a      	orrs	r2, r3
100024c0:	1d8b      	adds	r3, r1, #6
100024c2:	009b      	lsls	r3, r3, #2
100024c4:	18e3      	adds	r3, r4, r3
100024c6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100024c8:	46bd      	mov	sp, r7
100024ca:	b002      	add	sp, #8
100024cc:	bdb0      	pop	{r4, r5, r7, pc}
100024ce:	46c0      	nop			; (mov r8, r8)
100024d0:	e000e100 	.word	0xe000e100
100024d4:	e000ed00 	.word	0xe000ed00

100024d8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
100024d8:	b580      	push	{r7, lr}
100024da:	b082      	sub	sp, #8
100024dc:	af00      	add	r7, sp, #0
100024de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
100024e0:	687b      	ldr	r3, [r7, #4]
100024e2:	789b      	ldrb	r3, [r3, #2]
100024e4:	b25b      	sxtb	r3, r3
100024e6:	1c18      	adds	r0, r3, #0
100024e8:	f7ff ff72 	bl	100023d0 <__NVIC_EnableIRQ>
}
100024ec:	46bd      	mov	sp, r7
100024ee:	b002      	add	sp, #8
100024f0:	bd80      	pop	{r7, pc}
100024f2:	46c0      	nop			; (mov r8, r8)

100024f4 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
100024f4:	b580      	push	{r7, lr}
100024f6:	b082      	sub	sp, #8
100024f8:	af00      	add	r7, sp, #0
100024fa:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
100024fc:	687b      	ldr	r3, [r7, #4]
100024fe:	789a      	ldrb	r2, [r3, #2]
10002500:	687b      	ldr	r3, [r7, #4]
10002502:	78db      	ldrb	r3, [r3, #3]
10002504:	1c19      	adds	r1, r3, #0
10002506:	b253      	sxtb	r3, r2
10002508:	1c18      	adds	r0, r3, #0
1000250a:	f7ff ff7b 	bl	10002404 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
1000250e:	687b      	ldr	r3, [r7, #4]
10002510:	789b      	ldrb	r3, [r3, #2]
10002512:	b2da      	uxtb	r2, r3
10002514:	687b      	ldr	r3, [r7, #4]
10002516:	789b      	ldrb	r3, [r3, #2]
10002518:	b25b      	sxtb	r3, r3
1000251a:	021b      	lsls	r3, r3, #8
1000251c:	b299      	uxth	r1, r3
1000251e:	687b      	ldr	r3, [r7, #4]
10002520:	881b      	ldrh	r3, [r3, #0]
10002522:	b29b      	uxth	r3, r3
10002524:	430b      	orrs	r3, r1
10002526:	b29b      	uxth	r3, r3
10002528:	b29b      	uxth	r3, r3
1000252a:	1c10      	adds	r0, r2, #0
1000252c:	1c19      	adds	r1, r3, #0
1000252e:	f7ff f8a3 	bl	10001678 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	791b      	ldrb	r3, [r3, #4]
10002536:	2b00      	cmp	r3, #0
10002538:	d003      	beq.n	10002542 <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
1000253a:	687b      	ldr	r3, [r7, #4]
1000253c:	1c18      	adds	r0, r3, #0
1000253e:	f7ff ffcb 	bl	100024d8 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10002542:	2300      	movs	r3, #0
}
10002544:	1c18      	adds	r0, r3, #0
10002546:	46bd      	mov	sp, r7
10002548:	b002      	add	sp, #8
1000254a:	bd80      	pop	{r7, pc}

1000254c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000254c:	b580      	push	{r7, lr}
1000254e:	b082      	sub	sp, #8
10002550:	af00      	add	r7, sp, #0
10002552:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002554:	687b      	ldr	r3, [r7, #4]
10002556:	2280      	movs	r2, #128	; 0x80
10002558:	0052      	lsls	r2, r2, #1
1000255a:	60da      	str	r2, [r3, #12]
}
1000255c:	46bd      	mov	sp, r7
1000255e:	b002      	add	sp, #8
10002560:	bd80      	pop	{r7, pc}
10002562:	46c0      	nop			; (mov r8, r8)

10002564 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002564:	b580      	push	{r7, lr}
10002566:	b082      	sub	sp, #8
10002568:	af00      	add	r7, sp, #0
1000256a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
1000256c:	687b      	ldr	r3, [r7, #4]
1000256e:	7b5b      	ldrb	r3, [r3, #13]
10002570:	2201      	movs	r2, #1
10002572:	4053      	eors	r3, r2
10002574:	b2db      	uxtb	r3, r3
10002576:	2b00      	cmp	r3, #0
10002578:	d00f      	beq.n	1000259a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000257a:	687b      	ldr	r3, [r7, #4]
1000257c:	689a      	ldr	r2, [r3, #8]
1000257e:	687b      	ldr	r3, [r7, #4]
10002580:	7b1b      	ldrb	r3, [r3, #12]
10002582:	1c10      	adds	r0, r2, #0
10002584:	1c19      	adds	r1, r3, #0
10002586:	f7ff f8f1 	bl	1000176c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000258a:	687b      	ldr	r3, [r7, #4]
1000258c:	689b      	ldr	r3, [r3, #8]
1000258e:	1c18      	adds	r0, r3, #0
10002590:	f7ff ffdc 	bl	1000254c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10002594:	687b      	ldr	r3, [r7, #4]
10002596:	2201      	movs	r2, #1
10002598:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
1000259a:	2300      	movs	r3, #0
}
1000259c:	1c18      	adds	r0, r3, #0
1000259e:	46bd      	mov	sp, r7
100025a0:	b002      	add	sp, #8
100025a2:	bd80      	pop	{r7, pc}

100025a4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
100025a4:	b580      	push	{r7, lr}
100025a6:	b082      	sub	sp, #8
100025a8:	af00      	add	r7, sp, #0
100025aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
100025ac:	687b      	ldr	r3, [r7, #4]
100025ae:	6819      	ldr	r1, [r3, #0]
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	7b1a      	ldrb	r2, [r3, #12]
100025b4:	687b      	ldr	r3, [r7, #4]
100025b6:	3304      	adds	r3, #4
100025b8:	1c08      	adds	r0, r1, #0
100025ba:	1c11      	adds	r1, r2, #0
100025bc:	1c1a      	adds	r2, r3, #0
100025be:	f7fe fde3 	bl	10001188 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
100025c2:	687b      	ldr	r3, [r7, #4]
100025c4:	6819      	ldr	r1, [r3, #0]
100025c6:	687b      	ldr	r3, [r7, #4]
100025c8:	7b1a      	ldrb	r2, [r3, #12]
100025ca:	687b      	ldr	r3, [r7, #4]
100025cc:	7b5b      	ldrb	r3, [r3, #13]
100025ce:	1c08      	adds	r0, r1, #0
100025d0:	1c11      	adds	r1, r2, #0
100025d2:	1c1a      	adds	r2, r3, #0
100025d4:	f7ff f976 	bl	100018c4 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
100025d8:	2300      	movs	r3, #0
}
100025da:	1c18      	adds	r0, r3, #0
100025dc:	46bd      	mov	sp, r7
100025de:	b002      	add	sp, #8
100025e0:	bd80      	pop	{r7, pc}
100025e2:	46c0      	nop			; (mov r8, r8)

100025e4 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100025e4:	b580      	push	{r7, lr}
100025e6:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
100025e8:	4b03      	ldr	r3, [pc, #12]	; (100025f8 <SystemCoreSetup+0x14>)
100025ea:	4a03      	ldr	r2, [pc, #12]	; (100025f8 <SystemCoreSetup+0x14>)
100025ec:	6e92      	ldr	r2, [r2, #104]	; 0x68
100025ee:	2101      	movs	r1, #1
100025f0:	438a      	bics	r2, r1
100025f2:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
100025f4:	46bd      	mov	sp, r7
100025f6:	bd80      	pop	{r7, pc}
100025f8:	40010000 	.word	0x40010000

100025fc <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100025fc:	b580      	push	{r7, lr}
100025fe:	b084      	sub	sp, #16
10002600:	af00      	add	r7, sp, #0
10002602:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10002604:	230f      	movs	r3, #15
10002606:	18fb      	adds	r3, r7, r3
10002608:	2200      	movs	r2, #0
1000260a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
1000260c:	230e      	movs	r3, #14
1000260e:	18fb      	adds	r3, r7, r3
10002610:	2200      	movs	r2, #0
10002612:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10002614:	230d      	movs	r3, #13
10002616:	18fb      	adds	r3, r7, r3
10002618:	2200      	movs	r2, #0
1000261a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
1000261c:	230c      	movs	r3, #12
1000261e:	18fb      	adds	r3, r7, r3
10002620:	2200      	movs	r2, #0
10002622:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10002624:	230b      	movs	r3, #11
10002626:	18fb      	adds	r3, r7, r3
10002628:	2200      	movs	r2, #0
1000262a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	781b      	ldrb	r3, [r3, #0]
10002630:	2201      	movs	r2, #1
10002632:	4053      	eors	r3, r2
10002634:	b2db      	uxtb	r3, r3
10002636:	2b00      	cmp	r3, #0
10002638:	d01b      	beq.n	10002672 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
1000263a:	230e      	movs	r3, #14
1000263c:	18fa      	adds	r2, r7, r3
1000263e:	230d      	movs	r3, #13
10002640:	18fb      	adds	r3, r7, r3
10002642:	7812      	ldrb	r2, [r2, #0]
10002644:	781b      	ldrb	r3, [r3, #0]
10002646:	4313      	orrs	r3, r2
10002648:	b2da      	uxtb	r2, r3
1000264a:	230c      	movs	r3, #12
1000264c:	18fb      	adds	r3, r7, r3
1000264e:	781b      	ldrb	r3, [r3, #0]
10002650:	4313      	orrs	r3, r2
10002652:	b2d9      	uxtb	r1, r3
10002654:	230f      	movs	r3, #15
10002656:	18fb      	adds	r3, r7, r3
10002658:	220b      	movs	r2, #11
1000265a:	18ba      	adds	r2, r7, r2
1000265c:	7812      	ldrb	r2, [r2, #0]
1000265e:	430a      	orrs	r2, r1
10002660:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10002662:	230f      	movs	r3, #15
10002664:	18fb      	adds	r3, r7, r3
10002666:	781b      	ldrb	r3, [r3, #0]
10002668:	2b00      	cmp	r3, #0
1000266a:	d102      	bne.n	10002672 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
1000266c:	687b      	ldr	r3, [r7, #4]
1000266e:	2201      	movs	r2, #1
10002670:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002672:	230f      	movs	r3, #15
10002674:	18fb      	adds	r3, r7, r3
10002676:	781b      	ldrb	r3, [r3, #0]
}
10002678:	1c18      	adds	r0, r3, #0
1000267a:	46bd      	mov	sp, r7
1000267c:	b004      	add	sp, #16
1000267e:	bd80      	pop	{r7, pc}

10002680 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002680:	b590      	push	{r4, r7, lr}
10002682:	b085      	sub	sp, #20
10002684:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10002686:	1c3b      	adds	r3, r7, #0
10002688:	4a05      	ldr	r2, [pc, #20]	; (100026a0 <SystemCoreClockSetup+0x20>)
1000268a:	ca13      	ldmia	r2!, {r0, r1, r4}
1000268c:	c313      	stmia	r3!, {r0, r1, r4}
1000268e:	6812      	ldr	r2, [r2, #0]
10002690:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002692:	1c3b      	adds	r3, r7, #0
10002694:	1c18      	adds	r0, r3, #0
10002696:	f7fe fe4f 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
1000269a:	46bd      	mov	sp, r7
1000269c:	b005      	add	sp, #20
1000269e:	bd90      	pop	{r4, r7, pc}
100026a0:	10002ad0 	.word	0x10002ad0

100026a4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
100026a4:	b590      	push	{r4, r7, lr}
100026a6:	b083      	sub	sp, #12
100026a8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
100026aa:	1dfb      	adds	r3, r7, #7
100026ac:	2200      	movs	r2, #0
100026ae:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
100026b0:	1dfc      	adds	r4, r7, #7
100026b2:	4b42      	ldr	r3, [pc, #264]	; (100027bc <DAVE_Init+0x118>)
100026b4:	1c18      	adds	r0, r3, #0
100026b6:	f7ff ffa1 	bl	100025fc <CLOCK_XMC1_Init>
100026ba:	1c03      	adds	r3, r0, #0
100026bc:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
100026be:	1dfb      	adds	r3, r7, #7
100026c0:	781b      	ldrb	r3, [r3, #0]
100026c2:	2b00      	cmp	r3, #0
100026c4:	d106      	bne.n	100026d4 <DAVE_Init+0x30>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
100026c6:	1dfc      	adds	r4, r7, #7
100026c8:	4b3d      	ldr	r3, [pc, #244]	; (100027c0 <DAVE_Init+0x11c>)
100026ca:	1c18      	adds	r0, r3, #0
100026cc:	f7ff fc42 	bl	10001f54 <UART_Init>
100026d0:	1c03      	adds	r3, r0, #0
100026d2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100026d4:	1dfb      	adds	r3, r7, #7
100026d6:	781b      	ldrb	r3, [r3, #0]
100026d8:	2b00      	cmp	r3, #0
100026da:	d106      	bne.n	100026ea <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
100026dc:	1dfc      	adds	r4, r7, #7
100026de:	4b39      	ldr	r3, [pc, #228]	; (100027c4 <DAVE_Init+0x120>)
100026e0:	1c18      	adds	r0, r3, #0
100026e2:	f7ff ff5f 	bl	100025a4 <DIGITAL_IO_Init>
100026e6:	1c03      	adds	r3, r0, #0
100026e8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100026ea:	1dfb      	adds	r3, r7, #7
100026ec:	781b      	ldrb	r3, [r3, #0]
100026ee:	2b00      	cmp	r3, #0
100026f0:	d106      	bne.n	10002700 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_1); 
100026f2:	1dfc      	adds	r4, r7, #7
100026f4:	4b34      	ldr	r3, [pc, #208]	; (100027c8 <DAVE_Init+0x124>)
100026f6:	1c18      	adds	r0, r3, #0
100026f8:	f7ff ff54 	bl	100025a4 <DIGITAL_IO_Init>
100026fc:	1c03      	adds	r3, r0, #0
100026fe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002700:	1dfb      	adds	r3, r7, #7
10002702:	781b      	ldrb	r3, [r3, #0]
10002704:	2b00      	cmp	r3, #0
10002706:	d106      	bne.n	10002716 <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_2); 
10002708:	1dfc      	adds	r4, r7, #7
1000270a:	4b30      	ldr	r3, [pc, #192]	; (100027cc <DAVE_Init+0x128>)
1000270c:	1c18      	adds	r0, r3, #0
1000270e:	f7ff ff49 	bl	100025a4 <DIGITAL_IO_Init>
10002712:	1c03      	adds	r3, r0, #0
10002714:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002716:	1dfb      	adds	r3, r7, #7
10002718:	781b      	ldrb	r3, [r3, #0]
1000271a:	2b00      	cmp	r3, #0
1000271c:	d106      	bne.n	1000272c <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_3); 
1000271e:	1dfc      	adds	r4, r7, #7
10002720:	4b2b      	ldr	r3, [pc, #172]	; (100027d0 <DAVE_Init+0x12c>)
10002722:	1c18      	adds	r0, r3, #0
10002724:	f7ff ff3e 	bl	100025a4 <DIGITAL_IO_Init>
10002728:	1c03      	adds	r3, r0, #0
1000272a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000272c:	1dfb      	adds	r3, r7, #7
1000272e:	781b      	ldrb	r3, [r3, #0]
10002730:	2b00      	cmp	r3, #0
10002732:	d106      	bne.n	10002742 <DAVE_Init+0x9e>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_4); 
10002734:	1dfc      	adds	r4, r7, #7
10002736:	4b27      	ldr	r3, [pc, #156]	; (100027d4 <DAVE_Init+0x130>)
10002738:	1c18      	adds	r0, r3, #0
1000273a:	f7ff ff33 	bl	100025a4 <DIGITAL_IO_Init>
1000273e:	1c03      	adds	r3, r0, #0
10002740:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002742:	1dfb      	adds	r3, r7, #7
10002744:	781b      	ldrb	r3, [r3, #0]
10002746:	2b00      	cmp	r3, #0
10002748:	d106      	bne.n	10002758 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
1000274a:	1dfc      	adds	r4, r7, #7
1000274c:	4b22      	ldr	r3, [pc, #136]	; (100027d8 <DAVE_Init+0x134>)
1000274e:	1c18      	adds	r0, r3, #0
10002750:	f7ff ff28 	bl	100025a4 <DIGITAL_IO_Init>
10002754:	1c03      	adds	r3, r0, #0
10002756:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002758:	1dfb      	adds	r3, r7, #7
1000275a:	781b      	ldrb	r3, [r3, #0]
1000275c:	2b00      	cmp	r3, #0
1000275e:	d106      	bne.n	1000276e <DAVE_Init+0xca>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
10002760:	1dfc      	adds	r4, r7, #7
10002762:	4b1e      	ldr	r3, [pc, #120]	; (100027dc <DAVE_Init+0x138>)
10002764:	1c18      	adds	r0, r3, #0
10002766:	f7ff ff1d 	bl	100025a4 <DIGITAL_IO_Init>
1000276a:	1c03      	adds	r3, r0, #0
1000276c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000276e:	1dfb      	adds	r3, r7, #7
10002770:	781b      	ldrb	r3, [r3, #0]
10002772:	2b00      	cmp	r3, #0
10002774:	d106      	bne.n	10002784 <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_7 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_7); 
10002776:	1dfc      	adds	r4, r7, #7
10002778:	4b19      	ldr	r3, [pc, #100]	; (100027e0 <DAVE_Init+0x13c>)
1000277a:	1c18      	adds	r0, r3, #0
1000277c:	f7ff ff12 	bl	100025a4 <DIGITAL_IO_Init>
10002780:	1c03      	adds	r3, r0, #0
10002782:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002784:	1dfb      	adds	r3, r7, #7
10002786:	781b      	ldrb	r3, [r3, #0]
10002788:	2b00      	cmp	r3, #0
1000278a:	d106      	bne.n	1000279a <DAVE_Init+0xf6>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
1000278c:	1dfc      	adds	r4, r7, #7
1000278e:	4b15      	ldr	r3, [pc, #84]	; (100027e4 <DAVE_Init+0x140>)
10002790:	1c18      	adds	r0, r3, #0
10002792:	f7ff feaf 	bl	100024f4 <INTERRUPT_Init>
10002796:	1c03      	adds	r3, r0, #0
10002798:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000279a:	1dfb      	adds	r3, r7, #7
1000279c:	781b      	ldrb	r3, [r3, #0]
1000279e:	2b00      	cmp	r3, #0
100027a0:	d106      	bne.n	100027b0 <DAVE_Init+0x10c>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
100027a2:	1dfc      	adds	r4, r7, #7
100027a4:	4b10      	ldr	r3, [pc, #64]	; (100027e8 <DAVE_Init+0x144>)
100027a6:	1c18      	adds	r0, r3, #0
100027a8:	f7ff fd7e 	bl	100022a8 <TIMER_Init>
100027ac:	1c03      	adds	r3, r0, #0
100027ae:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
100027b0:	1dfb      	adds	r3, r7, #7
100027b2:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
100027b4:	1c18      	adds	r0, r3, #0
100027b6:	46bd      	mov	sp, r7
100027b8:	b003      	add	sp, #12
100027ba:	bd90      	pop	{r4, r7, pc}
100027bc:	200005c0 	.word	0x200005c0
100027c0:	20000550 	.word	0x20000550
100027c4:	10002a50 	.word	0x10002a50
100027c8:	10002a60 	.word	0x10002a60
100027cc:	10002a70 	.word	0x10002a70
100027d0:	10002a80 	.word	0x10002a80
100027d4:	10002a90 	.word	0x10002a90
100027d8:	10002aa0 	.word	0x10002aa0
100027dc:	10002ab0 	.word	0x10002ab0
100027e0:	10002ac0 	.word	0x10002ac0
100027e4:	10002a48 	.word	0x10002a48
100027e8:	20000564 	.word	0x20000564

100027ec <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100027ec:	b580      	push	{r7, lr}
100027ee:	b082      	sub	sp, #8
100027f0:	af00      	add	r7, sp, #0
100027f2:	6078      	str	r0, [r7, #4]
100027f4:	1c0a      	adds	r2, r1, #0
100027f6:	1cfb      	adds	r3, r7, #3
100027f8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
100027fa:	1cfb      	adds	r3, r7, #3
100027fc:	781b      	ldrb	r3, [r3, #0]
100027fe:	4a03      	ldr	r2, [pc, #12]	; (1000280c <XMC_GPIO_ToggleOutput+0x20>)
10002800:	409a      	lsls	r2, r3
10002802:	687b      	ldr	r3, [r7, #4]
10002804:	605a      	str	r2, [r3, #4]
}
10002806:	46bd      	mov	sp, r7
10002808:	b002      	add	sp, #8
1000280a:	bd80      	pop	{r7, pc}
1000280c:	00010001 	.word	0x00010001

10002810 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002810:	b580      	push	{r7, lr}
10002812:	b082      	sub	sp, #8
10002814:	af00      	add	r7, sp, #0
10002816:	6078      	str	r0, [r7, #4]
10002818:	1c0a      	adds	r2, r1, #0
1000281a:	1cfb      	adds	r3, r7, #3
1000281c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
1000281e:	687b      	ldr	r3, [r7, #4]
10002820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002822:	1cfb      	adds	r3, r7, #3
10002824:	781b      	ldrb	r3, [r3, #0]
10002826:	40da      	lsrs	r2, r3
10002828:	1c13      	adds	r3, r2, #0
1000282a:	2201      	movs	r2, #1
1000282c:	4013      	ands	r3, r2
}
1000282e:	1c18      	adds	r0, r3, #0
10002830:	46bd      	mov	sp, r7
10002832:	b002      	add	sp, #8
10002834:	bd80      	pop	{r7, pc}
10002836:	46c0      	nop			; (mov r8, r8)

10002838 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
10002838:	b580      	push	{r7, lr}
1000283a:	b082      	sub	sp, #8
1000283c:	af00      	add	r7, sp, #0
1000283e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
10002840:	687b      	ldr	r3, [r7, #4]
10002842:	681a      	ldr	r2, [r3, #0]
10002844:	687b      	ldr	r3, [r7, #4]
10002846:	7b1b      	ldrb	r3, [r3, #12]
10002848:	1c10      	adds	r0, r2, #0
1000284a:	1c19      	adds	r1, r3, #0
1000284c:	f7ff ffce 	bl	100027ec <XMC_GPIO_ToggleOutput>
}
10002850:	46bd      	mov	sp, r7
10002852:	b002      	add	sp, #8
10002854:	bd80      	pop	{r7, pc}
10002856:	46c0      	nop			; (mov r8, r8)

10002858 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10002858:	b580      	push	{r7, lr}
1000285a:	b082      	sub	sp, #8
1000285c:	af00      	add	r7, sp, #0
1000285e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10002860:	687b      	ldr	r3, [r7, #4]
10002862:	681a      	ldr	r2, [r3, #0]
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	7b1b      	ldrb	r3, [r3, #12]
10002868:	1c10      	adds	r0, r2, #0
1000286a:	1c19      	adds	r1, r3, #0
1000286c:	f7ff ffd0 	bl	10002810 <XMC_GPIO_GetInput>
10002870:	1c03      	adds	r3, r0, #0
}
10002872:	1c18      	adds	r0, r3, #0
10002874:	46bd      	mov	sp, r7
10002876:	b002      	add	sp, #8
10002878:	bd80      	pop	{r7, pc}
1000287a:	46c0      	nop			; (mov r8, r8)

1000287c <main>:
uint8_t count1 = 0;
uint8_t uart_data_arr[8]={0};


int main(void)
{
1000287c:	b590      	push	{r4, r7, lr}
1000287e:	b083      	sub	sp, #12
10002880:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  // Initialization of DAVE apps
   status = DAVE_Init();
10002882:	1dfc      	adds	r4, r7, #7
10002884:	f7ff ff0e 	bl	100026a4 <DAVE_Init>
10002888:	1c03      	adds	r3, r0, #0
1000288a:	7023      	strb	r3, [r4, #0]

  // Check if DAVE initialization is successful
  if (status != DAVE_STATUS_SUCCESS)
1000288c:	1dfb      	adds	r3, r7, #7
1000288e:	781b      	ldrb	r3, [r3, #0]
10002890:	2b00      	cmp	r3, #0
10002892:	d000      	beq.n	10002896 <main+0x1a>
  {
    // Handle error
    while(1);
10002894:	e7fe      	b.n	10002894 <main+0x18>
  // Infinite loop
  while(1)
  {

    // Read the current state of the pushbutton
    buttonState = DIGITAL_IO_GetInput(&DIGITAL_IO_2);
10002896:	4b2f      	ldr	r3, [pc, #188]	; (10002954 <main+0xd8>)
10002898:	1c18      	adds	r0, r3, #0
1000289a:	f7ff ffdd 	bl	10002858 <DIGITAL_IO_GetInput>
1000289e:	1c03      	adds	r3, r0, #0
100028a0:	b2da      	uxtb	r2, r3
100028a2:	4b2d      	ldr	r3, [pc, #180]	; (10002958 <main+0xdc>)
100028a4:	701a      	strb	r2, [r3, #0]


    // Check if the pushbutton is pressed (active high)
    if (buttonState == 0)
100028a6:	4b2c      	ldr	r3, [pc, #176]	; (10002958 <main+0xdc>)
100028a8:	781b      	ldrb	r3, [r3, #0]
100028aa:	2b00      	cmp	r3, #0
100028ac:	d116      	bne.n	100028dc <main+0x60>
    {
    //  changeLEDMode();

    	for (volatile uint32_t i = 0; i < 999999; i++);
100028ae:	2300      	movs	r3, #0
100028b0:	603b      	str	r3, [r7, #0]
100028b2:	e002      	b.n	100028ba <main+0x3e>
100028b4:	683b      	ldr	r3, [r7, #0]
100028b6:	3301      	adds	r3, #1
100028b8:	603b      	str	r3, [r7, #0]
100028ba:	683b      	ldr	r3, [r7, #0]
100028bc:	4a27      	ldr	r2, [pc, #156]	; (1000295c <main+0xe0>)
100028be:	4293      	cmp	r3, r2
100028c0:	d9f8      	bls.n	100028b4 <main+0x38>
    	 ledMode++;
100028c2:	4b27      	ldr	r3, [pc, #156]	; (10002960 <main+0xe4>)
100028c4:	781b      	ldrb	r3, [r3, #0]
100028c6:	3301      	adds	r3, #1
100028c8:	b2da      	uxtb	r2, r3
100028ca:	4b25      	ldr	r3, [pc, #148]	; (10002960 <main+0xe4>)
100028cc:	701a      	strb	r2, [r3, #0]

    	  if (ledMode > 2)
100028ce:	4b24      	ldr	r3, [pc, #144]	; (10002960 <main+0xe4>)
100028d0:	781b      	ldrb	r3, [r3, #0]
100028d2:	2b02      	cmp	r3, #2
100028d4:	d902      	bls.n	100028dc <main+0x60>
    	  {
    	    ledMode = 0;
100028d6:	4b22      	ldr	r3, [pc, #136]	; (10002960 <main+0xe4>)
100028d8:	2200      	movs	r2, #0
100028da:	701a      	strb	r2, [r3, #0]


    	  }
    }
    	  // Update the LED based on the new mode
    	  switch (ledMode)
100028dc:	4b20      	ldr	r3, [pc, #128]	; (10002960 <main+0xe4>)
100028de:	781b      	ldrb	r3, [r3, #0]
100028e0:	2b01      	cmp	r3, #1
100028e2:	d002      	beq.n	100028ea <main+0x6e>
100028e4:	2b02      	cmp	r3, #2
100028e6:	d02f      	beq.n	10002948 <main+0xcc>
100028e8:	e032      	b.n	10002950 <main+0xd4>
    	  {
    	    case 1:

    	    	ledMode = 1;
100028ea:	4b1d      	ldr	r3, [pc, #116]	; (10002960 <main+0xe4>)
100028ec:	2201      	movs	r2, #1
100028ee:	701a      	strb	r2, [r3, #0]
    	    	if ((DIGITAL_IO_GetInput(&DIGITAL_IO_0)) == 1)  // pushbutton 1 press
100028f0:	4b1c      	ldr	r3, [pc, #112]	; (10002964 <main+0xe8>)
100028f2:	1c18      	adds	r0, r3, #0
100028f4:	f7ff ffb0 	bl	10002858 <DIGITAL_IO_GetInput>
100028f8:	1e03      	subs	r3, r0, #0
100028fa:	2b01      	cmp	r3, #1
100028fc:	d10d      	bne.n	1000291a <main+0x9e>
    	    	 {
    	    		uart_data_arr[1] = 1;
100028fe:	4b1a      	ldr	r3, [pc, #104]	; (10002968 <main+0xec>)
10002900:	2201      	movs	r2, #1
10002902:	705a      	strb	r2, [r3, #1]
    	    	    DIGITAL_IO_ToggleOutput(&DIGITAL_IO_4);
10002904:	4b19      	ldr	r3, [pc, #100]	; (1000296c <main+0xf0>)
10002906:	1c18      	adds	r0, r3, #0
10002908:	f7ff ff96 	bl	10002838 <DIGITAL_IO_ToggleOutput>
    	    	    UART_Transmit(&UART_0, uart_data_arr, sizeof(uart_data_arr));
1000290c:	4a18      	ldr	r2, [pc, #96]	; (10002970 <main+0xf4>)
1000290e:	4b16      	ldr	r3, [pc, #88]	; (10002968 <main+0xec>)
10002910:	1c10      	adds	r0, r2, #0
10002912:	1c19      	adds	r1, r3, #0
10002914:	2208      	movs	r2, #8
10002916:	f7ff fb35 	bl	10001f84 <UART_Transmit>

    	    	 }
    	    	if ((DIGITAL_IO_GetInput(&DIGITAL_IO_1)) == 1)  // pushbutton 2 press
1000291a:	4b16      	ldr	r3, [pc, #88]	; (10002974 <main+0xf8>)
1000291c:	1c18      	adds	r0, r3, #0
1000291e:	f7ff ff9b 	bl	10002858 <DIGITAL_IO_GetInput>
10002922:	1e03      	subs	r3, r0, #0
10002924:	2b01      	cmp	r3, #1
10002926:	d10e      	bne.n	10002946 <main+0xca>
    	    	{
    	    		uart_data_arr[1] = 2;
10002928:	4b0f      	ldr	r3, [pc, #60]	; (10002968 <main+0xec>)
1000292a:	2202      	movs	r2, #2
1000292c:	705a      	strb	r2, [r3, #1]
    	    		DIGITAL_IO_ToggleOutput(&DIGITAL_IO_5);
1000292e:	4b12      	ldr	r3, [pc, #72]	; (10002978 <main+0xfc>)
10002930:	1c18      	adds	r0, r3, #0
10002932:	f7ff ff81 	bl	10002838 <DIGITAL_IO_ToggleOutput>
    	    		UART_Transmit(&UART_0, uart_data_arr, sizeof(uart_data_arr));
10002936:	4a0e      	ldr	r2, [pc, #56]	; (10002970 <main+0xf4>)
10002938:	4b0b      	ldr	r3, [pc, #44]	; (10002968 <main+0xec>)
1000293a:	1c10      	adds	r0, r2, #0
1000293c:	1c19      	adds	r1, r3, #0
1000293e:	2208      	movs	r2, #8
10002940:	f7ff fb20 	bl	10001f84 <UART_Transmit>

    	    	}
    	      break;
10002944:	e004      	b.n	10002950 <main+0xd4>
10002946:	e003      	b.n	10002950 <main+0xd4>
    	    case 2:
    	    	ledMode = 2;
10002948:	4b05      	ldr	r3, [pc, #20]	; (10002960 <main+0xe4>)
1000294a:	2202      	movs	r2, #2
1000294c:	701a      	strb	r2, [r3, #0]
    	      break;
1000294e:	46c0      	nop			; (mov r8, r8)

    }

    }
10002950:	e7a1      	b.n	10002896 <main+0x1a>
10002952:	46c0      	nop			; (mov r8, r8)
10002954:	10002a70 	.word	0x10002a70
10002958:	200005c5 	.word	0x200005c5
1000295c:	000f423e 	.word	0x000f423e
10002960:	200005c4 	.word	0x200005c4
10002964:	10002a50 	.word	0x10002a50
10002968:	200005c8 	.word	0x200005c8
1000296c:	10002a90 	.word	0x10002a90
10002970:	20000550 	.word	0x20000550
10002974:	10002a60 	.word	0x10002a60
10002978:	10002aa0 	.word	0x10002aa0

1000297c <__libc_init_array>:
1000297c:	4b0e      	ldr	r3, [pc, #56]	; (100029b8 <__libc_init_array+0x3c>)
1000297e:	b570      	push	{r4, r5, r6, lr}
10002980:	2500      	movs	r5, #0
10002982:	1c1e      	adds	r6, r3, #0
10002984:	4c0d      	ldr	r4, [pc, #52]	; (100029bc <__libc_init_array+0x40>)
10002986:	1ae4      	subs	r4, r4, r3
10002988:	10a4      	asrs	r4, r4, #2
1000298a:	42a5      	cmp	r5, r4
1000298c:	d004      	beq.n	10002998 <__libc_init_array+0x1c>
1000298e:	00ab      	lsls	r3, r5, #2
10002990:	58f3      	ldr	r3, [r6, r3]
10002992:	4798      	blx	r3
10002994:	3501      	adds	r5, #1
10002996:	e7f8      	b.n	1000298a <__libc_init_array+0xe>
10002998:	f7ff faa6 	bl	10001ee8 <_init>
1000299c:	4b08      	ldr	r3, [pc, #32]	; (100029c0 <__libc_init_array+0x44>)
1000299e:	2500      	movs	r5, #0
100029a0:	1c1e      	adds	r6, r3, #0
100029a2:	4c08      	ldr	r4, [pc, #32]	; (100029c4 <__libc_init_array+0x48>)
100029a4:	1ae4      	subs	r4, r4, r3
100029a6:	10a4      	asrs	r4, r4, #2
100029a8:	42a5      	cmp	r5, r4
100029aa:	d004      	beq.n	100029b6 <__libc_init_array+0x3a>
100029ac:	00ab      	lsls	r3, r5, #2
100029ae:	58f3      	ldr	r3, [r6, r3]
100029b0:	4798      	blx	r3
100029b2:	3501      	adds	r5, #1
100029b4:	e7f8      	b.n	100029a8 <__libc_init_array+0x2c>
100029b6:	bd70      	pop	{r4, r5, r6, pc}
100029b8:	2000059c 	.word	0x2000059c
100029bc:	2000059c 	.word	0x2000059c
100029c0:	2000059c 	.word	0x2000059c
100029c4:	2000059c 	.word	0x2000059c
100029c8:	10001846 	.word	0x10001846
100029cc:	10001846 	.word	0x10001846
100029d0:	10001850 	.word	0x10001850
100029d4:	10001850 	.word	0x10001850
100029d8:	1000187e 	.word	0x1000187e
100029dc:	1000187e 	.word	0x1000187e
100029e0:	1000187e 	.word	0x1000187e
100029e4:	1000187e 	.word	0x1000187e
100029e8:	1000185a 	.word	0x1000185a
100029ec:	10001866 	.word	0x10001866
100029f0:	10001872 	.word	0x10001872
100029f4:	10001872 	.word	0x10001872

100029f8 <UART_0_channel_config>:
100029f8:	00002580 01080800 00000010              .%..........

10002a04 <UART_0_tx_pin_config>:
10002a04:	0000009c 00000001                       ........

10002a0c <UART_0_tx_pin>:
10002a0c:	40040100 00000002 10002a04              ...@.....*..

10002a18 <UART_0_config>:
10002a18:	100029f8 1000213d 00000000 00000000     .)..=!..........
	...
10002a34:	10002a0c 04020200 00000004              .*..........

10002a40 <UART_0_rx_pin_config>:
10002a40:	00000000 00000001                       ........

10002a48 <INTERRUPT_0>:
10002a48:	03000002 00000001                       ........

10002a50 <DIGITAL_IO_0>:
10002a50:	40040200 00000018 00000000 00000000     ...@............

10002a60 <DIGITAL_IO_1>:
10002a60:	40040200 00000018 00000000 00000001     ...@............

10002a70 <DIGITAL_IO_2>:
10002a70:	40040200 00000008 00000000 00000002     ...@............

10002a80 <DIGITAL_IO_3>:
10002a80:	40040200 00000000 00000000 00000003     ...@............

10002a90 <DIGITAL_IO_4>:
10002a90:	40040400 00000080 00000001 00000000     ...@............

10002aa0 <DIGITAL_IO_5>:
10002aa0:	40040400 00000080 00000001 00000001     ...@............

10002ab0 <DIGITAL_IO_6>:
10002ab0:	40040400 00000080 00000001 00000003     ...@............

10002ac0 <DIGITAL_IO_7>:
10002ac0:	40040400 00000080 00000001 00000002     ...@............
10002ad0:	00010000 03300000 00010000 00000000     ......0.........

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
